// Обработчик взаимодействия с AuthService
const fetch = require('node-fetch');
require('dotenv').config();
const CommonFunctionHelper = require("openfsm-common-functions")
const commonFunction= new CommonFunctionHelper();

class PaymentServiceClientHandler  {
    constructor() {

    }

      /**
     * Метод для выполнения запроса 
     * @param {JWT token} token - токен пользователя
     * @param {Object} order - Информация о заказе
     * @returns {Object} - Объект с результатом авторизации
     */
      async create(token, order) {
        try {
            const response = await fetch(process.env.PAYMENT_SERVICE_CREATE_URL, {
                method: 'POST',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${token}`, },
                body: JSON.stringify(order)
            });

            const data = await response.json();
            if (response.ok) {
                console.log(`Payment create OK`);
                return { success: true, data };
            } else {
                console.log(`Payment create failed`);
                return { success: false, status: response.status, data };
            }
        } catch (error) {
            console.log(`Payment create failed`);
            return { success: false, error: error.message };
        }
    }

    async decline(token, order) {
        try {
            const response = await fetch(process.env.PAYMENT_SERVICE_DECLINE_URL, {
                method: 'POST',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${token}`, },
                body: JSON.stringify(order)
            });

            const data = await response.json();
            if (response.ok) {
                console.log(`Payment decline OK`);
                return { success: true, data };
            } else {
                console.log(`Payment decline failed`);
                return { success: false, status: response.status, data };
            }
        } catch (error) {
            console.log(`Payment decline failed`);
            return { success: false, error: error.message };
        }
    }

    async instruments(token) {
        try {
            const response = await fetch(process.env.PAYMENT_SERVICE_INSTRUMENTS_URL, {
                method: 'GET',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${token}`, },                
            });

            const data = await response.json();
            if (response.ok) {
                console.log(`Get Instrumets OK`);
                return { success: true, data };
            } else {
                console.log(`Get Instrumets failed`);
                return { success: false, status: response.status, data };
            }
        } catch (error) {
            console.log(`Get Instrumets failed`);
            return { success: false, error: error.message };
        }
    }    

    async cards(token) {
        try {
            const response = await fetch(process.env.PAYMENT_SERVICE_CARDS_URL, {
                method: 'GET',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${token}`, },                
            });

            const data = await response.json();
            if (response.ok) {
                console.log(`Get cards OK`);
                return { success: true, data };
            } else {
                console.log(`Get cards  failed`);
                return { success: false, status: response.status, data };
            }
        } catch (error) {
            console.log(`Get cards  failed`);
            return { success: false, error: error.message };
        }
    }    

    async setDefaultCard(token, req) {
        try {
            const response = await fetch(process.env.PAYMENT_SERVICE_SET_CARD_DEFAULT_URL, {
                method: 'POST',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${token}`, },                
                body: JSON.stringify(req.body)
            });

            const data = await response.json();
            if (response.ok) {
                console.log(`setDefaultCard OK`);
                return { success: true, data };
            } else {
                console.log(`setDefaultCard failed`);
                return { success: false, status: response.status, data };
            }
        } catch (error) {
            console.log(`setDefaultCard failed`);
            return { success: false, error: error.message };
        }
    }    

    async deleteCard(token, req) {
        try {
            const response = await fetch(process.env.PAYMENT_SERVICE_DELETE_CARD_URL, {
                method: 'DELETE',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${token}`, },  
                body: JSON.stringify(req.body)              
            });

            const data = await response.json();
            if (response.ok) {
                console.log(`deleteCard OK`);
                return { success: true, data };
            } else {
                console.log(`deleteCard failed`);
                return { success: false, status: response.status, data };
            }
        } catch (error) {
            console.log(`deleteCard failed`);
            return { success: false, error: error.message };
        }
    }    

}

module.exports = PaymentServiceClientHandler
/* Общая библиотека */

/* Paths */
const path = require("path");
const COMMON_PATH_TO_SITE = path.join(path.resolve(), 'project'); // путь до корня сайта
const COMMON_PATH_TO_PAGES = path.join(COMMON_PATH_TO_SITE, 'src', 'pages'); // путь до страниц-шаблонов
const COMMON_PATH_TO_PARTIALS = path.join(COMMON_PATH_TO_PAGES, 'partials'); // путь до блоков

/* Pages */
const COMMON_REGISTRATION_PAGE = path.join(COMMON_PATH_TO_PAGES, 'registration.hbs'); // Путь до страницы регистрации
const COMMON_REGISTRATION_CONFIRM_PAGE = path.join(COMMON_PATH_TO_PAGES, 'registration-confirm.hbs'); // Путь до страницы подтверждения регистрации
const COMMON_REGISTRATION_SUCCESS_PAGE = path.join(COMMON_PATH_TO_PAGES, 'registration-success.hbs'); // Путь до страницы успешной регистрации
const COMMON_REGISTRATION_DECLINE_PAGE = path.join(COMMON_PATH_TO_PAGES, 'registration-decline.hbs'); // Путь до страницы отклоненной регистрации
const COMMON_REGISTRATION_FAILURE_PAGE = path.join(COMMON_PATH_TO_PAGES, 'registration-failure.hbs'); // Путь до страницы ошибки регистрации
const COMMON_LOGON_PAGE = path.join(COMMON_PATH_TO_PAGES, 'logon.hbs'); // Путь до страницы входа
const COMMON_LOGOUT_PAGE = path.join(COMMON_PATH_TO_PAGES, 'logout.hbs'); // Путь до страницы выхода
const COMMON_OUT_SERVICE_PAGE = path.join(COMMON_PATH_TO_PAGES, 'out-service.hbs'); // Путь до страницы временной недоступности
const COMMON_SESSION_CLOSE_PAGE = path.join(COMMON_PATH_TO_PAGES, 'session-close.hbs'); // Путь до страницы закрытия сессии
const COMMON_APP_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до страницы приложения
const COMMON_PRODUCTS_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до витрины
const COMMON_PROFILE_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до профиля
const COMMON_BASKET_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до корзины
const COMMON_ORDERS_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до заказов
const COMMON_GET_ORDER_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до страницы получения заказа
const COMMON_GET_ORDER_SUCCESS_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до страницы успешного получения заказа
const COMMON_GET_ORDER_ERROR_PAGE = path.join(COMMON_PATH_TO_PAGES, 'app.hbs'); // Путь до страницы ошибки получения заказа
const COMMON_404_PAGE = path.join(COMMON_PATH_TO_PAGES, 'page-404.hbs'); // Путь до страницы 404

/* HTTP-code-error */
const COMMON_HTTP_CODE_500 = 'Server error'; // Сообщение для ошибки 500


// Accounts
exports.SQL_CREATE_ACCOUNT = `INSERT INTO accounts (user_id, balance) VALUES (?, 0)`;
exports.SQL_FIND_ACCOUNT_BY_ID = `SELECT * FROM accounts WHERE id = ?`;
exports.SQL_FIND_ACCOUNT_BY_USER_ID = `SELECT * FROM accounts WHERE user_id = ?`;
exports.SQL_UPDATE_ACCOUNT_BALANCE = `UPDATE accounts SET balance = ? WHERE id = ?`;

// Basket
exports.SQL_CREATE_BASKET = `INSERT INTO basket (user_id) VALUES (?)`;
exports.SQL_FIND_BASKET_BY_ID = `SELECT * FROM basket WHERE id = ? AND status = 'open'`;
exports.SQL_FIND_BASKET_BY_USER_ID = `SELECT * FROM basket WHERE user_id = ? AND status = 'open'`;
exports.SQL_ADD_ITEM_TO_BASKET = `
  INSERT IGNORE INTO basket_items (basket_id, item_id, quantity) 
  VALUES (?, ?, ?) 
  ON DUPLICATE KEY UPDATE quantity = quantity + VALUES(quantity)
`;
exports.SQL_REMOVE_ITEM_FROM_BASKET = `DELETE FROM basket_items WHERE basket_id = ? AND item_id = ?`;
exports.SQL_GET_BASKET_ITEMS = `SELECT * FROM basket_items WHERE basket_id = ?`;
exports.SQL_UPDATE_BASKET_STATUS = `UPDATE basket SET status = ? WHERE id = ?`;

// Warehouse
exports.SQL_RESERVE_ITEM = `UPDATE warehouse SET reserved = reserved + ? WHERE item_id = ? AND stock - reserved >= ?`;
exports.SQL_RELEASE_ITEM = `UPDATE warehouse SET reserved = reserved - ? WHERE item_id = ?`;
exports.SQL_GET_WAREHOUSE_ITEMS = `SELECT * FROM warehouse WHERE item_id IN (?)`;

// Delivery
exports.SQL_RESERVE_COURIER_SLOT = `UPDATE delivery SET reserved = 1 WHERE courier_id = ? AND time_slot = ? AND reserved = 0`;
exports.SQL_RELEASE_COURIER_SLOT = `UPDATE delivery SET reserved = 0 WHERE courier_id = ? AND time_slot = ?`;

// Orders
exports.SQL_CREATE_ORDER = `INSERT INTO orders (basket_id, user_id, amount, reference_id, status) VALUES (?, ?, ?, ?, 'pending')`;
exports.SQL_FIND_ORDER_BY_ID = `SELECT * FROM orders WHERE id = ?`;
exports.SQL_UPDATE_ORDER_STATUS = `UPDATE orders SET status = ? WHERE id = ?`;



/* Экспорт констант */
module.exports = {
  COMMON_PATH_TO_SITE,
  COMMON_PATH_TO_PAGES,
  COMMON_PATH_TO_PARTIALS,
  COMMON_REGISTRATION_PAGE,
  COMMON_REGISTRATION_CONFIRM_PAGE,
  COMMON_REGISTRATION_SUCCESS_PAGE,
  COMMON_REGISTRATION_DECLINE_PAGE,
  COMMON_REGISTRATION_FAILURE_PAGE,
  COMMON_LOGON_PAGE,
  COMMON_LOGOUT_PAGE,
  COMMON_OUT_SERVICE_PAGE,
  COMMON_SESSION_CLOSE_PAGE,
  COMMON_APP_PAGE,
  COMMON_PRODUCTS_PAGE,
  COMMON_PROFILE_PAGE,
  COMMON_BASKET_PAGE,
  COMMON_ORDERS_PAGE,
  COMMON_GET_ORDER_PAGE,
  COMMON_GET_ORDER_SUCCESS_PAGE,
  COMMON_GET_ORDER_ERROR_PAGE,
  COMMON_404_PAGE,
  COMMON_HTTP_CODE_500
};

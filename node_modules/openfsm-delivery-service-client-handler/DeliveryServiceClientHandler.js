// Коннектор  взаимодействия с DeliveryService (доставка))
const fetch = require('node-fetch');
require('dotenv').config({ path: '.env-pickmax-service' });
const common = require("openfsm-common");  // Библиотека с общими параметрами
const CommonFunctionHelper = require("openfsm-common-functions")
const commonFunction= new CommonFunctionHelper();

class DeliveryServiceClientHandler {
    constructor(token) {
    }

    /**
     * Метод для получения списка адресов
     * @param {Objeсе} req, res 
     * @returns {Object} - Объект с параметрами продукта
     */

    async getAdresses(req, res) {
        try {
            const response = await fetch(`${process.env.DELIVERY_GET_USER_ADDRESSES}`, {
                method: 'GET',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${commonFunction.getJwtToken(req)}`, },
            });
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error };
        }
    }
    async setDefaultAdress(req, res) {
        try {
            const response = await fetch(`${process.env.DELIVERY_SET_USER_ADDRESS}`, {
                method: 'PATCH',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${commonFunction.getJwtToken(req)}`, },
                body: JSON.stringify(req.body)
            });
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error };
        }
    }

    async saveAddress(req, res) {
        try {
            const response = await fetch(`${process.env.DELIVERY_ADD_USER_ADDRESS}`, {
                method: 'POST',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${commonFunction.getJwtToken(req)}`, },
                body: JSON.stringify(req.body)
            });
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error };
        }
    }

    async deleteAddress(req, res) {
        try {
            const response = await fetch(`${process.env.DELIVERY_DELETE_USER_ADDRESS}`, {
                method: 'DELETE',
                headers: { 'Content-Type' : 'application/json', 'Authorization': `Bearer ${commonFunction.getJwtToken(req)}`, },
                body: JSON.stringify(req.body)
            });
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error };
        }
    }    

}    


module.exports = DeliveryServiceClientHandler;

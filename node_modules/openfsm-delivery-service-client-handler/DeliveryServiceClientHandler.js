// Коннектор  взаимодействия с DeliveryService (доставка))
const fetch = require('node-fetch');
require('dotenv').config({ path: '.env-pickmax-service' });
const common = require("openfsm-common");  // Библиотека с общими параметрами
const CommonFunctionHelper = require("openfsm-common-functions")
const commonFunction= new CommonFunctionHelper();

class DeliveryServiceClientHandler {
    constructor(token) {
    }

    /**
     * Метод для получения списка адресов
     * @param {Objeсе} req, res 
     * @returns {Object} - Объект с параметрами продукта
     */

    headers(req){
        return {
            'Content-Type': 'application/json',
            'x-tg-init-data': `${req?.headers['x-tg-init-data'] || '' }`, 
            'Authorization': `Bearer ${commonFunction.getJwtToken(req)}`,
        }
    }

    async getAdresses(req, res) {
        try {
            let query = !req?.query?.query ? null : req?.query?.query;
            const url = new URL(process.env.DELIVERY_GET_USER_ADDRESSES);
            if (query) {
                url.searchParams.append('query', query);
            }
            const response = await fetch(url.toString(), {
                method: 'GET',
                headers: this.headers(req)
            });    
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error };
        }
    }
    async setDefaultAdress(req, res) {
        try {
            const response = await fetch(`${process.env.DELIVERY_SET_USER_ADDRESS}`, {
                method: 'PATCH',
                headers: this.headers(req),
                body: JSON.stringify(req.body)
            });
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error };
        }
    }

    async saveAddress(req, res) {
        try {
            const response = await fetch(`${process.env.DELIVERY_ADD_USER_ADDRESS}`, {
                method: 'POST',
                headers: this.headers(req),
                body: JSON.stringify(req.body)
            });
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error };
        }
    }

    async deleteAddress(req, res) {
        try {
            const response = await fetch(`${process.env.DELIVERY_DELETE_USER_ADDRESS}`, {
                method: 'DELETE',
                headers: this.headers(req),
                body: JSON.stringify(req.body)
            });
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error };
        }
    }    

    async deliveryTypes(req, res) {
        try {
            const response = await fetch(`${process.env.DELIVERY_GET_TYPES}`, {
                method: 'GET',
                headers: this.headers(req),            
            });
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error };
        }
    }    
    

     /**
     * Метод для получения почтовых отделений
     * @returns {Object} - Объект с результатом
     */
     async getSuggestRussianPostalUnits(req, res) {
        try {
            const query = req.query.query;
            const url = new URL(process.env.CLIENT_DADATA_SUGGEST_RUSSIAN_POSTAL_UNITS_URL);
            url.searchParams.append('query', query);

            const response = await fetch(url, {
                method: 'GET',
                headers: this.headers(req),
            });

            const data = await response.json();
            if (response.ok) {
                console.log(`Get suggest address successfully.`);
                return { success: true, data };
            } else {
                console.log(`Get suggest address failed.`);
                return { success: false, status: response.status, data };
            }
        } catch (error) {
            //"invalid json response body at http://91.218.230.34:3006/api/dadata/v1/suggest/russian-postal-units?query=undefined reason: Unexpected token < in JSON at position 0"
            console.log(`Get suggest address failed.`);
            return { success: false, error: error.message };
        }
    }

/**
     * Метод для получения почтовых отделений
     * @returns {Object} - Объект с результатом
     */
async getSuggestCdekFilials(req, res) {
    try {
        const query = req.query.query;
        const url = new URL(process.env.CLIENT_DADATA_SUGGEST_CDEK_FILIALS_URL);
        url.searchParams.append('query', query);

        const response = await fetch(url, {
            method: 'GET',
            headers: this.headers(req),
        });

        const data = await response.json();
        if (response.ok) {
            console.log(`Get suggest address successfully.`);
            return { success: true, data };
        } else {
            console.log(`Get suggest address failed.`);
            return { success: false, status: response.status, data };
        }
    } catch (error) {
        console.log(`Get suggest address failed.`);
        return { success: false, error: error.message };
    }
}
    


}    


module.exports = DeliveryServiceClientHandler;

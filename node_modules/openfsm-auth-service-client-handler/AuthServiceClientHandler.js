// Обработчик взаимодействия с AuthService
const fetch = require('node-fetch');
require('dotenv').config();
const CommonFunctionHelper = require("openfsm-common-functions")
const commonFunction= new CommonFunctionHelper();

class AuthServiceClientHandler {
    constructor() {
    }
    headers(req){
        return {
            'Content-Type': 'application/json',
            'x-tg-init-data': `${req?.headers['x-tg-init-data'] || '' }`, 
            'Authorization': `Bearer ${commonFunction.getJwtToken(req)}`,
        }
    }
/*
     * Метод для выполнения запроса на авторизацию
     * @param {string} email - Email пользователя
     * @param {string} password - Пароль пользователя
     * @returns {Object} - Объект с результатом авторизации
*/
    async login(req, email, password) {
        try {
            const response = await fetch(process.env.AUTH_SERVICE_LOGIN_URL, {
                method: 'POST',
                headers: this.headers(req),
                body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            if (response.ok) {
                console.log(`User ${email} successfully logged in.`);
                return { success: true, data };
            } else {
                console.log(`Login failed for user ${email}: ${JSON.stringify(data)}`);
                return { success: false, status: response.status, data };
            }
        } catch (error) {
            console.log(`Error during login for user ${email}: ${error.message}`);
            return { success: false, error: error.message };
        }
    }

/*
     * Метод для выполнения запроса на регистрацию пользователя
     * @param {string} email - Email пользователя
     * @param {string} password - Пароль пользователя
     * @returns {Object} - Объект с результатом регистрации
*/
async register(req, email, password) {
    try {
        const response = await fetch(process.env.AUTH_SERVICE_REGISTER_URL, {
            method: 'POST',
            headers: this.headers(req),
            body: JSON.stringify({ email, password })
        });

        const data = await response.json();
        if (response.ok) {
            console.log(`User ${email} successfully logged in.`);
            return { success: true, data };
        } else {
            console.log(`Login failed for user ${email}: ${JSON.stringify(data)}`);
            return { success: false, status: response.status, data };
        }
    } catch (error) {
        console.log(`Error during login for user ${email}: ${error.message}`);
        return { success: false, error: error.message };
    }
}

/*
     * Метод для выполнения запроса на проверку токена
     * @param {req, res} 
     * @returns {Object} - Объект с результатом регистрации
*/
async checkToken(req, res) {
    try {   
        let headers = this.headers(req);
        const response = await fetch(process.env.AUTH_CHECK_TOKEN_URL, {
            method: 'POST',                           
            headers: headers,
            body: JSON.stringify(req.body)
        });
        const data = await response.json();
        if (response.ok) {
            console.log(`Check token success.`);
            return { success: true, data };
        } else {
            console.log(`Check token failed.`);
            return { success: false, status: response.status, data };
        }
    } catch (error) {
        console.log(`Check token failed.`);
        return { success: false, error: error.message };
    }
}

/*
     * Метод для выполнения запроса на выход пользователя из сессии
     * @param {req, res} 
     * @returns {Object} - Объект с результатом регистрации
*/
async logout(req, res) {
    try {
        const response = await fetch(process.env.AUTH_LOGOUT_URL, {
            method: 'POST',
            headers: this.headers(req),
            body: JSON.stringify(req.body)
        });
        const data = await response.json();
        if (response.ok) {
            console.log(`Check token success.`);
            return { success: true, data };
        } else {
            console.log(`Check token faild.`);
            return { success: false, status: response.status, data };
        }
    } catch (error) {
        console.log(`Check token faild.`);
        return { success: false, error: error.message };
    }
}

/*
     * Метод для выполнения запроса на получение сервисных данных пользователя от AuthService
     * @param {req, res} 
     * @returns {Object} - Объект с результатом регистрации
*/
async me(req, res) {
    try {
        const response = await fetch(process.env.AUTH_ME_URL, {
            method: 'GET',
            headers: this.headers(req),
        });

        console.log(
            `Bearer ${commonFunction.getJwtToken(req)}`,
            response);
        const data = await response.json();
        if (response.ok) {
            console.log(`Get @Me success.`);
            return { success: true, data };
        } else {
            console.log(`Get @Me faild.`);
            return { success: false, status: response.status, data };
        }
    } catch (error) {
        console.log(`Get @Me faild.`);
        return { success: false, error: error.message };
    }
  }


/*
     * Метод для выполнения запроса на получение сервисных данных telegram-пользователя от AuthService
     * @param {req, res} 
     * @returns {Object} - Объект с результатом регистрации
*/
async telegramMe(req, res) {
    try {
        const response = await fetch(process.env.AUTH_TELEGRAM_ME_URL, {
            method: 'GET',
            headers: this.headers(req),     
        });

        console.log(
            `Bearer ${commonFunction.getJwtToken(req)}`,
            response);
        const data = await response.json();
        if (response.ok) {
            console.log(`Get @telegram success.`);
            return { success: true, data };
        } else {
            console.log(`Get @telegram faild.`);
            return { success: false, status: response.status, data };
        }
    } catch (error) {
        console.log(`Get @telegram faild.`);
        return { success: false, error: error.message };
    }
  }


/*
     * Метод для выполнения идентификатора пользователя
     * @param {req, res} 
     * @returns {Object} - Id пользователя
*/

async getUserId(req, res) {
    try {
        let result = await this.checkToken(req, res);
        if(!result) throw(401);      
        return  result?.data?.user?.id || null;
    } catch (error) {
        console.log(`Get @Me faild.`);
        return { success: false, error: error.message };
    }    
  }


  /*
     * Метод для проверки кода подтверждения записи
     * @param {req} 
     * @returns {Object} - Id пользователя
*/

async checkCode(req) {
    try {        
        const response = await fetch(process.env.AUTH_CHECK_CODE_URL, {
            method: 'POST',                           
            headers: this.headers(req),
            body: JSON.stringify(req.body)
        });
        const data = await response.json();
        if (response.ok) {
            console.log(`Check code success.`);
            return { success: true, data };
        } else {
            console.log(`Check code faild.`);
            return { success: false, status: response.status, data };
        }
    } catch (error) {
        console.log(`Check code faild.`);
        return { success: false, error: error.message };
    }
  }

  
// список вопросов
  async get2PAFactorsList(req) {
    try {        
        const response = await fetch(process.env.AUTH_GET_TWO_FACTOR_LIST_URL, {
            method: 'GET',                           
            headers: this.headers(req)            
        });
        const data = await response.json();
        if (response.ok) {
            console.log(`Check code success.`);
            return { success: true, data };
        } else {
            console.log(`Check code faild.`);
            return { success: false, status: response.status, data };
        }
    } catch (error) {
        console.log(`Check code faild.`);
        return { success: false, error: error.message };
    }
  }

  async getSecurityQuestionStatus(req) {
    try {        
        const response = await fetch(process.env.AUTH_GET_SECURITY_STATUS_URL, {
            method: 'GET',                           
            headers: this.headers(req),            
        });
        const data = await response.json();
        if (response.ok) {
            console.log(`getSecurityStatus success.`);
            return { success: true, data };
        } else {
            console.log(`getSecurityStatus failed.`);
            return { success: false, status: response.status, data };
        }
    } catch (error) {
        console.log(`getSecurityStatus failed.`);
        return { success: false, error: error.message };
    }
  }

  async getPINCodeStatus(req) {
    try {        
        const response = await fetch(process.env.AUTH_GET_PIN_CODE_STATUS_URL, {
            method: 'GET',
            headers: this.headers(req),            
        });
        const data = await response.json();
        if (response.ok) {
            console.log(`getPINCodeStatus success.`);
            return { success: true, data };
        } else {
            console.log(`getPINCodeStatus failed.`);
            return { success: false, status: response.status, data };
        }
    } catch (error) {
        console.log(`getPINCodeStatus failed.`);
        return { success: false, error: error.message };
    }
  }

  async getSecurityQuestion(req) {
    try {        
        const response = await fetch(process.env.AUTH_GET_SECURITY_QUESTION_URL, {
            method: 'GET',
            headers: this.headers(req),            
        });
        const data = await response.json();
        if (response.ok) {
            console.log(`getSecurityQuestion success.`);
            return { success: true, data };
        } else {
            console.log(`getSecurityQuestion failed.`);
            return { success: false, status: response.status, data };
        }
    } catch (error) {
        console.log(`getSecurityQuestion failed.`);
        return { success: false, error: error.message };
    }
  }

  
  async getSecurityAnswer(req) {
    try {        
        const response = await fetch(process.env.AUTH_GET_SECURITY_ANSWER_URL, {
            method: 'POST',
            headers: this.headers(req),            
            body: JSON.stringify(req.body)
        });
        const data = await response.json();
        if (response.ok) {
            console.log(`getSecurityAnswer success.`);
            return { success: true, data };
        } else {
            console.log(`getSecurityAnswer failed.`);
            return { success: false, status: response.status, data };
        }
    } catch (error) {
        console.log(`getSecurityAnswer failed.`);
        return { success: false, error: error.message };
    }
  }

}


module.exports = AuthServiceClientHandler;

const jwt = require('jsonwebtoken');

class JwtTokenHandler {
  constructor(secretKey, options = {}) {
    if (!secretKey) {
      throw new Error("Secret key must be provided for JWT operations.");
    }

    this.secretKey = secretKey;
    this.options = {
      algorithm: 'HS256',
      expiresIn: '1h', // Default expiration time
      ...options
    };
  }

  /**
   * Генерирует JWT токен
   * @param {Object} payload - Данные для включения в токен
   * @param {Object} [customOptions] - Переопределение стандартных опций
   * @returns {string} - Сгенерированный JWT токен
   */
  generateToken(payload, customOptions = {}) {
    return jwt.sign(payload, this.secretKey, { ...this.options, ...customOptions });
  }

  /**
   * Проверяет и декодирует JWT токен
   * @param {string} token - JWT токен
   * @returns {Object} - Декодированные данные токена
   * @throws {Error} - В случае невалидного токена
   */
  verifyToken(token) {
    try {
      return jwt.verify(token, this.secretKey, this.options);
    } catch (error) {
      throw new Error(`Token verification failed: ${error.message}`);
    }
  }

  /**
   * Декодирует токен без проверки подписи
   * @param {string} token - JWT токен
   * @returns {Object|null} - Декодированные данные токена или null
   */
  decodeToken(token) {
    return jwt.decode(token);
  }
}

module.exports = JwtTokenHandler;

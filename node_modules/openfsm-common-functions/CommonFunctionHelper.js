const common = require("openfsm-common"); // Библиотека с общими параметрами
const logger = require('openfsm-logger-handler');
const CustomError = require("openfsm-custom-error");

class CommonFunctionHelper {
  constructor() {
  }

  /**
   * Возвращает токен из запроса из headers или cookies
   * @param {Object} request - Данные запроса
   * @returns {string} - JWT токен
   */
 getJwtToken(req) {
        return (req.headers['authorization'] && req.headers['authorization'].split(' ')[1]) || (req.cookies && req.cookies.accessToken)  
  }

 getDescriptionByCode(code) {
  try {
      for (const key in common.HTTP_CODES) {
        if (common.HTTP_CODES[key].code === Number(code)) {
            return common.HTTP_CODES[key].description;
        }
     }    
   } catch (error) {
    logger.error(error);
  }
  return "Неизвестная ошибка";  
}

sendError(req, res, error = null) {  
  let code = 500;
  let message =  'Неизвестная ошибка';
  if (error instanceof CustomError) {
    code = error.code ? error.code : code;
    message = error.message;
  } 
   logger.error(error);
   res.status(code).json(error);
 };
}


module.exports = CommonFunctionHelper;

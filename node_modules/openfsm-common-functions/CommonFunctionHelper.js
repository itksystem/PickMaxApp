const common = require("openfsm-common"); // Библиотека с общими параметрами
const logger = require('openfsm-logger-handler');
const CustomError = require("openfsm-custom-error");

class CommonFunctionHelper {
  constructor() {
  }

  /**
   * Возвращает токен из запроса из headers или cookies
   * @param {Object} request - Данные запроса
   * @returns {string} - JWT токен
   */
 getJwtToken(req) {
        const token = (req.headers['authorization'] && req.headers['authorization'].split(' ')[1]) || (req.cookies && req.cookies.accessToken)  
        return token || ``
  }

 getDescriptionByCode(code) {
  try {
      for (const key in common.HTTP_CODES) {
        if (common.HTTP_CODES[key].code === Number(code)) {
            return common.HTTP_CODES[key].description;
        }
     }    
   } catch (error) {
    logger.error(error);
  }
  return "Неизвестная ошибка";  
}

 sendError(req, res, error = null) {  
  let code = 500;
  let message =  'Неизвестная ошибка';
  if (error instanceof CustomError) {
    code = error.code ? error.code : code;
    message = error.message;
  } 
   logger.error(error);
   res.status(code).json(error);
 };

/**
 * Маскирует номер телефона, оставляя только последние `visibleDigits` цифр видимыми.
 * 
 * @param {string} phoneNumber Исходный номер телефона (может содержать любые символы)
 * @param {string} maskSymbol Символ для маскирования (по умолчанию '*')
 * @param {number} visibleDigits Количество оставляемых видимыми цифр в конце (по умолчанию 4)
 * @returns {string} Замаскированный номер телефона
 */
 maskPhoneNumber(phoneNumber, maskSymbol = '*', visibleDigits = 4) {
    // Оставляем только цифры из исходной строки
    const digits = phoneNumber.replace(/\D/g, '');

    if (digits.length <= visibleDigits) {
        return phoneNumber; // Не маскируем, если цифр меньше или равно visibleDigits
    }

    const maskedPart = maskSymbol.repeat(digits.length - visibleDigits);
    const visiblePart = digits.slice(-visibleDigits);

    return maskedPart + visiblePart;
 }

 maskEmailCustom(email, maskSymbol = '*', visibleStart = 1, visibleEnd = 1) {
    if (!email || !email.includes('@')) return email;

    const [localPart, domain] = email.split('@');
    const visibleLength = visibleStart + visibleEnd;

    if (localPart.length <= visibleLength) {
        return `${localPart}@${domain}`;
    }

    const start = localPart.slice(0, visibleStart);
    const end = localPart.slice(-visibleEnd);
    const masked = maskSymbol.repeat(localPart.length - visibleLength);

    return `${start}${masked}${end}@${domain}`;
}


}


module.exports = CommonFunctionHelper;

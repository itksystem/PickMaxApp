// Коннектор  взаимодействия с WarehouseService (склад))
const fetch = require('node-fetch');
require('dotenv').config();
const common = require("openfsm-common"); // Библиотека с общими параметрами
const CommonFunctionHelper = require("openfsm-common-functions")
const commonFunction= new CommonFunctionHelper();

class WarehouseServiceClientHandler {
    constructor(token) {
    }
    headers(req){
        return {
            'Content-Type': 'application/json',
            'x-tg-init-data': `${req.headers['x-tg-init-data']}`, 
            'Authorization': `Bearer ${commonFunction.getJwtToken(req)}`,
        }
    }
    /**
     * Метод для выполнения запроса на получение параметров продукта
     * @param {string} product_id - идентификатор продукта
     * @returns {Object} - Объект с параметрами продукта
     */

    async getProductById(req, product_id) {
        try {
            // Проверяем, что product_id определен
            if (!product_id)  throw(common.HTTP_CODES.BAD_REQUEST.code) 
            const response = await fetch(`${process.env.WAREHOUSE_SERVICE_GET_PRODUCT_ID_URL}/${product_id}`, {
                method: 'GET',
                headers: this.headers(req),
            });
            if (!response.ok)  throw new Error(response.status);   
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error};
        }
    }
    
  
    async getProducts(req, categoryId) {
        try {
            categoryId = (categoryId || null);            
            const response = await fetch(process.env.WAREHOUSE_SERVICE_GET_PRODUCTS_URL, {     
                method: 'POST',                           
                headers: this.headers(req),
                body: JSON.stringify({ categoryId })
            });
    
            if (!response.ok)  throw new Error(response.status);    
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error};
        }
    }


    
    async addItemToBasket(req, body) {
        try {
              const response = await fetch(process.env.WAREHOUSE_SERVICE_ADD_ITEM_TO_BASKET_URL, {                
                method: 'POST',                
                headers: this.headers(req),
                body: JSON.stringify(body)
            });
    
            if (!response.ok)  throw new Error(response.status);    
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error};
        }
    }

    async removeItemFromBasket(req, body) {
        try {
              const response = await fetch(process.env.WAREHOUSE_SERVICE_REMOVE_ITEM_TO_BASKET_URL, {                
                method: 'POST',                
                headers: this.headers(req),
                body: JSON.stringify(body)
            });
    
            if (!response.ok)  throw new Error(response.status);     
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error};
        }
    }

    async getBasket(req) {
        try {
              const response = await fetch(process.env.WAREHOUSE_SERVICE_GET_BASKET_URL, {                
                method: 'GET',                
                headers: this.headers(req),
            });
    
            if (!response.ok)  throw new Error(response.status);           
            const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
            return { success: true, data };    
        } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error};
        }
    }
    
async deletePositionFromBasket(req, productId) {
    try {
        const response = await fetch(process.env.WAREHOUSE_SERVICE_BASKET_POSITION_REMOVE_URL+`/${productId}`, {                
            method: 'DELETE',                
            headers: this.headers(req),
        });
    
        if (!response.ok)  throw new Error(response.status);           
        const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
        return { success: true, data };    
       } catch (error) { // Возвращаем ошибку с описанием            
            return { success: false, status: error};
    }
}    

async createOrder(req) { // Сформировать заказ из товаров в корзине
    try {
        const response = await fetch(process.env.WAREHOUSE_SERVICE_BASKET_ORDER_CREATE_URL, {                
            method: 'POST',                
            headers: this.headers(req),
            body: JSON.stringify(req.body)
        });

        if (!response.ok)  throw new Error(response.status);              
        const data = await response.json(); // Если статус OK, пытаемся распарсить JSON
        return { success: true, data };    
    } catch (error) { // Возвращаем ошибку с описанием            
        return { success: false, status: error};
    }
 }

 /*
     * Метод для установки статуса ОТМЕНЕН
     * @params {token} - токен пользователя
     * @params {orderId} - ID запроса
     * @returns {Object} - Объект с параметрами заказа
     */

 async getOrderDetails(req, orderId) {
    try {
        const response = await fetch(process.env.WAREHOUSE_SERVICE_ORDER_DETAILS_URL+`/${orderId}/details`, {
            method: 'GET',
            headers: this.headers(req),              
        });          
        if (!response.ok)  throw(response.status);       
        let data;
        try {
              data = await response.json();
            } catch (jsonError) {
             console.log(jsonError);                                        
             throw(500);
        }
        return { success: true, data };
      } catch (error) {
        // Возвращаем ошибку с описанием
        return { success: false, status: error};
    }
  }
}




module.exports = WarehouseServiceClientHandler;

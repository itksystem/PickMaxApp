// Коннектор  взаимодействия с WarehouseService (склад))
const fetch = require('node-fetch');
require('dotenv').config();
const common = require("openfsm-common"); // Библиотека с общими параметрами


class WarehouseServiceClientHandler {
    constructor(token) {
        this.WAREHOUSE_SERVICE_GET_PRODUCT_ID_URL = process.env.WAREHOUSE_SERVICE_GET_PRODUCT_ID_URL;
        this.WAREHOUSE_SERVICE_GET_PRODUCTS_URL = process.env.WAREHOUSE_SERVICE_GET_PRODUCTS_URL;
    }

    async setHeaders(token){
           return {
         'Content-Type' : 'application/json',
         'Authorization': `Bearer ${token}`,
       }
     }
    

    /**
     * Метод для выполнения запроса на получение параметров продукта
     * @param {string} product_id - идентификатор продукта
     * @returns {Object} - Объект с параметрами продукта
     */

    async getProductById(token, product_id) {
        try {
            // Проверяем, что product_id определен
            if (!product_id) {
                throw new Error('Invalid product ID');
            }
    
            const response = await fetch(`${this.WAREHOUSE_SERVICE_GET_PRODUCT_ID_URL}/${product_id}`, {
                method: 'GET',
                headers: {
                    'Content-Type' : 'application/json',
                    'Authorization': `Bearer ${token}`,
                  }
            });
    
            // Проверяем статус ответа перед парсингом
            if (!response.ok) {
                // Если статус не OK, создаем ошибку с кодом состояния
                const errorData = await response.text();  // Читаем как текст, если JSON недоступен
                throw new Error(`Error ${response.status}: ${errorData}`);
            }
    
            // Если статус OK, пытаемся распарсить JSON
            const data = await response.json();
            return { success: true, data };
    
        } catch (error) {
            // Возвращаем ошибку с описанием
            return { success: false, error: error.message };
        }
    }
    

    async getProducts(token, categoryId) {
        try {
            // Проверка на валидность categoryId
            if (!categoryId) {
               categoryId = null;
            }    
            const response = await fetch(this.WAREHOUSE_SERVICE_GET_PRODUCTS_URL, {                
                method: 'POST',                
                headers: {
                    'Content-Type' : 'application/json',
                    'Authorization': `Bearer ${token}`,
                  },
                body: JSON.stringify({ categoryId })
            });
    
            // Проверка статуса ответа перед парсингом
            if (!response.ok) {
                const errorData = await response.text(); // Читаем тело ответа как текст в случае ошибки
                throw new Error(`Error ${response.status}: ${errorData}`);
            }
    
            // Если ответ успешен, пытаемся распарсить JSON
            let data;
            try {
                data = await response.json();
            } catch (jsonError) {
                throw new Error('Failed to parse JSON response');
            }
    
            return { success: true, data };
    
        } catch (error) {
            // Возвращаем ошибку с описанием
            return { success: false, error: error.message };
        }
    }
    
    async getProducts(token, categoryId) {
        try {
            // Проверка на валидность categoryId
            if (!categoryId) {
               categoryId = null;
            }    
            const response = await fetch(this.WAREHOUSE_SERVICE_GET_PRODUCTS_URL, {                
                method: 'POST',                
                headers: {
                    'Content-Type' : 'application/json',
                    'Authorization': `Bearer ${token}`,
                  },
                body: JSON.stringify({ categoryId })
            });
    
            // Проверка статуса ответа перед парсингом
            if (!response.ok) {
                const errorData = await response.text(); // Читаем тело ответа как текст в случае ошибки
                throw new Error(`Error ${response.status}: ${errorData}`);
            }
    
            // Если ответ успешен, пытаемся распарсить JSON
            let data;
            try {
                data = await response.json();
            } catch (jsonError) {
                throw new Error('Failed to parse JSON response');
            }
    
            return { success: true, data };
    
        } catch (error) {
            // Возвращаем ошибку с описанием
            return { success: false, error: error.message };
        }
    }


    
    async addItemToBasket(token, body) {
        try {
              const response = await fetch(process.env.WAREHOUSE_SERVICE_ADD_ITEM_TO_BASKET_URL, {                
                method: 'POST',                
                headers: {
                    'Content-Type' : 'application/json',
                    'Authorization': `Bearer ${token}`,
                  },
                body: JSON.stringify(body)
            });
    
            // Проверка статуса ответа перед парсингом
            if (!response.ok) {
                const errorData = await response.text(); // Читаем тело ответа как текст в случае ошибки
                throw new Error(`Error ${response.status}: ${errorData}`);
            }
    
            // Если ответ успешен, пытаемся распарсить JSON
            let data;
            try {
                data = await response.json();
            } catch (jsonError) {
                throw new Error('Failed to parse JSON response');
            }
    
            return { success: true, data };
    
        } catch (error) {
            // Возвращаем ошибку с описанием
            return { success: false, error: error.message };
        }
    }

    async removeItemFromBasket(token, body) {
        try {
              const response = await fetch(process.env.WAREHOUSE_SERVICE_REMOVE_ITEM_TO_BASKET_URL, {                
                method: 'POST',                
                headers: {
                    'Content-Type' : 'application/json',
                    'Authorization': `Bearer ${token}`,
                  },
                body: JSON.stringify(body)
            });
    
            // Проверка статуса ответа перед парсингом
            if (!response.ok) {
                const errorData = await response.text(); // Читаем тело ответа как текст в случае ошибки
                throw new Error(`Error ${response.status}: ${errorData}`);
            }
    
            // Если ответ успешен, пытаемся распарсить JSON
            let data;
            try {
                data = await response.json();
            } catch (jsonError) {
                throw new Error('Failed to parse JSON response');
            }
    
            return { success: true, data };
    
        } catch (error) {
            // Возвращаем ошибку с описанием
            return { success: false, error: error.message };
        }
    }

    async getBasket(token) {
        try {
              const response = await fetch(process.env.WAREHOUSE_SERVICE_GET_BASKET_URL, {                
                method: 'GET',                
                headers: {
                    'Content-Type' : 'application/json',
                    'Authorization': `Bearer ${token}`,
                  }
            });
    
            // Проверка статуса ответа перед парсингом
            if (!response.ok) {
                const errorData = await response.text(); // Читаем тело ответа как текст в случае ошибки
                throw new Error(`Error ${response.status}: ${errorData}`);
            }    
            // Если ответ успешен, пытаемся распарсить JSON
            let data;
            try {
                data = await response.json();
            } catch (jsonError) {
                throw new Error('Failed to parse JSON response');
            }    
            return { success: true, data };    
        } catch (error) {
            // Возвращаем ошибку с описанием
            return { success: false, error: error.message };
        }
    }  

}

module.exports = WarehouseServiceClientHandler;

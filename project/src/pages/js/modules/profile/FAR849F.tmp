class ProfileSection extends PageBuilder {
    constructor(containerId) {
        super(containerId);
        return this;
    }

    createElement(tag, className = '', innerHTML = '') {
        const element = document.createElement(tag);
        if (className) element.className = className;
        if (innerHTML) element.innerHTML = innerHTML;
        return element;
    }

    createButton(label, extraClass = '', onClick = null) {
        const placement = this.createElement("div", `width-100 ${extraClass}`, ``);
        const button = this.createElement("button", `profile-button ${extraClass}`, label);
	placement.append(button);
        if (onClick) button.addEventListener("click", onClick);
        return placement;
    }

    createConfirmationLabel() {
	const placement = this.createElement("div", `width-100 text-end`, ``);
        placement.className = "registration-confirm-message";
        placement.innerHTML = ``;
        return placement;
    }

    createProfileItem(label, id, placeholder, required = false, feedbackError = '') {
        const container = this.createElement("div", "profile-item-container");
        const labelElement = this.createElement("label", "form-label", label);
        labelElement.setAttribute("for", id);
        
        const inputElement = this.createElement("input", "form-control");
        inputElement.type = "text";
        inputElement.id = id;
        inputElement.placeholder = placeholder;
        if (required) inputElement.setAttribute("required", "required");
        if (!required) inputElement.setAttribute("disabled", "disabled");
        
        const errorElement = this.createElement("div", "invalid-feedback", feedbackError);
        errorElement.id = `${id}-error`;
        errorElement.style.display = "none";
        
        container.append(labelElement, inputElement, errorElement);
        return container;
    }

    createDropdownSection(title, children = []) {
        const section = this.createElement("dropdown-section", '', `<span slot="title">${title}</span>`);
        children.forEach(child => section.appendChild(child));
        return section;
    }

    createRadio(id, name, label) {
        return this.createElement("div", "custom-radio row", `
            <div class="col-10">
                <input class="custom-control-input" type="radio" id="${id}" name="${name}">
                <label for="${id}" class="custom-control-label">${label}</label>
            </div>
            <div class="col-2">
                <button class="btn small-hot-button"><i class="fa-solid fa-x" style="font-size: 0.8rem;"></i></button>
            </div>
        `);
    }

    createCheckbox(id, name, label) {
        return this.createElement("div", "custom-checkbox row", `
             <div class="col">
                <input class="form-check-input" type="checkbox" id="${id}" name="${name}">
                <label for="${id}" class="custom-checkbox-label">${label}</label>
             </div>
        `);
    }


  InputAutoComplete(label, id, placeholder, required, feedbackError) {
    const container = document.createElement("div");
    container.className = "profile-input-group";

    const labelElement = Object.assign(document.createElement("label"), {
        htmlFor: id,
        className: "form-label",
        textContent: label
    });

    const autoCompleteElement = Object.assign(document.createElement("x-autocomplete"), {
        id,
        placeholder,
        url: "/api/bff/client/v1/town"
    });

    if (required) autoCompleteElement.setAttribute("required", "required");

    const errorElement = Object.assign(document.createElement("div"), {
        id: `${id}-error`,
        className: "invalid-feedback",
        style: "display: none;",
        textContent: feedbackError
    });

    container.append(labelElement, autoCompleteElement, errorElement);
    return container;
}

    registrationConfirmCodeForm(label, id, placeholder, required, feedbackError) {
     const container = document.createElement("dropdown-section");
     container.className = "registration-confirm-form";
     container.innerHTML = `
        <span slot="title">Подтверждение регистрации</spa>    
        <div class="registration-confirm-form-text">Введите код отправленный на вашу электронную почту</div>
	<div class="profile-item-container">	
 	 <div class="row">
	    <div class="col-12 text-center">
	        <input type="text" class="form-control mx-auto" id="verificationCode" placeholder="" style="max-width: 300px;">
	    </div>
	</div>
        </div>
	<div class="row">
	    <div class="col-2"></div>
	    <div class="col-8 text-center"><button type="button" class="confirm-code-button" id="${id}-button">Отправить код</button></div>
	    <div class="col-2"></div>	    
        </div>
	<div class="row">
            <div id="${id}-error" class="invalid-feedback" style="display: none;"></div>
        </div>
      </div>
    `;
     return container;
    }


    ProfileCardContainer(data = null) {
        let api = new WebAPI();
        let webRequest = new WebRequest();

        const profileContainer = this.createElement("div", "card card-container");
        profileContainer.appendChild(this.createElement("div", "card-header", `<h3 class="card-title">Профиль</h3>`));

        const avatarName = `${data?.profile?.surname || ''} ${data?.profile?.name || ''}`.trim() || 'Аноним';
        const profileAvatar = this.createElement("div", "profile-avatar-container", `
            <div class="row w-100">
                <div class="col-4"><img src="/public/images/user-default.png" class="profile-avatar-image"></div>
                <div class="col">
                    <div class="row w-100">
                        <div class="col-12 shot-fio-container">${avatarName}</div>
                        <div class="col-12 telegram-account-container">@telegramAccount</div>
                        <div class="col-12 telegram-account-status-container"></div>
                    </div>
                </div>
            </div>
        `);
        profileContainer.appendChild(profileAvatar);
	profileContainer.appendChild(this.registrationConfirmCodeForm(`Код подтверждения`, `verificationCode`,  ``, ``, ``));
        profileContainer.appendChild(this.createProfileItem("Email", "login", "Электронный адрес", false));
        profileContainer.appendChild(this.createConfirmationLabel());
	
        const fioSection = this.createDropdownSection("Мои данные", [
            this.createProfileItem("Фамилия", "surname", "Укажите вашу фамилию", true),
            this.createProfileItem("Имя", "firstname", "Укажите ваше имя", true),
            this.createProfileItem("Отчество", "patronymic", "Укажите ваше отчество", true),
            this.createButton("Сохранить", "text-end", this.saveProfileButtonOnClick)
        ]);
        profileContainer.appendChild(fioSection);

        const phoneSection = this.createDropdownSection("Мой телефон", [
            this.createProfileItem("Телефон", "phone", "Укажите номер телефона", true, "Введите номер в формате +7 (XXX) XXX-XXXX"),
            this.createButton("Сохранить", "text-end", this.saveProfileButtonOnClick)
        ]);
        profileContainer.appendChild(phoneSection);

        const addressSection = this.createDropdownSection("Мои адреса доставки", [
            this.createRadio("customAddress1", "customAddress", "Москва, ул. Борисовские пруды 71к2 кв.10254"),
            this.createRadio("customAddress2", "customAddress", "Москва, ул. Борисовские пруды 71к2 кв.10254"),
            this.createRadio("customAddress3", "customAddress", "Москва, ул. Борисовские пруды 71к2 кв.10254"),
            this.createRadio("customAddress4", "customAddress", "Москва, ул. Борисовские пруды 71к2 кв.10254"),
            this.InputAutoComplete("Добавить адрес", "address", "Укажите адрес доставки", true, "Заполните данные для доставки товара"),
            this.createButton("Сохранить", "text-end")
        ]);
        profileContainer.appendChild(addressSection);

        profileContainer.appendChild(this.createDropdownSection("Мои подписки", [
            this.createCheckbox("customSubscribe1", "customSubscribe","Новости Москвы"),
            this.createCheckbox("customSubscribe2", "customSubscribe","Мульзона"),
            this.createCheckbox("customSubscribe3", "customSubscribe","Горячие вакансии"),
	]));


      let data = await webRequest.get(api.getPaymentCardsMethod(),{},  
	    false)
	.then(function(data) {
	 let cards = [];
          data.cards.forEach((element, index) => {
		cards.push(this.createRadio(`customPayment${index}`,"customPayment", `Карта ${element.MaskedCardName}`));
	  });
           profileContainer.appendChild(this.createDropdownSection("Мои средства платежа", cards));
           profileContainer.appendChild(this.createButton("Выход", "text-start", this.exitButtonOnClick))
           return data?.cards || null;
         }).catch(function(error) {



        this.addModule("Profile", profileContainer);
	this.getPaymentInstruments();
	let cards =  this.getPaymentCards();
	console.log(cards);
    }

    saveProfileButtonOnClick(){
     let o = this;
     let api = new WebAPI();
     let webRequest = new WebRequest();

     let login =  document.querySelector('[id="login"]')
     let surname = document.querySelector('[id="surname"]')
     let firstname = document.querySelector('[id="firstname"]')
     let patronymic = document.querySelector('[id="patronymic"]')
     let phone = document.querySelector('[id="phone"]')
     let address = document.querySelector('x-autocomplete')
     let autocomplete = document.getElementById('address');

     let request = webRequest.post(api.saveShopProfileMethod(),{
  	    surname : surname.value,
	    name : firstname.value,
	    patronymic : patronymic.value,
	    phone : phone.value,
	    address : autocomplete.getValue(),
	    fiasId : autocomplete.getValueId(),
	   },  
	    false ).then(function(data) {
             toastr.success('Профиль сохранен', 'Профиль', {timeOut: 3000});
           }).catch(function(error) {
         console.log('showProfilePage.Произошла ошибка =>', error);
         toastr.error('Ой! Что то пошло не так...', 'Профиль клиента', {timeOut: 3000});
      });

   }

    exitButtonOnClick(){
      let o = this;
      let api = new WebAPI();
      let webRequest = new WebRequest();
      const closeSessionButton = document.querySelector('[class="session-close"]');
      let request = webRequest.post(api.closeSessionMethod(), {}, false )
       .then(function(data) {
    	   document.location.replace(api.LOGON_URL());
         })                                
	.catch(function(error) {
 	   console.log('showProfilePage.Произошла ошибка =>', error);
	   toastr.error('Ой! Что то пошло не так...', 'Профиль клиента', {timeOut: 3000});
         });
      }

     getPaymentInstruments(){     
      let o = this;
      let api = new WebAPI();
      let webRequest = new WebRequest();
      let request = webRequest.get(api.getPaymentInstrumentsMethod(),{},  
	    false)
	.then(function(data) {
	   console.log(data);                
           }).catch(function(error) {
         console.log('getPaymentInstruments.Произошла ошибка =>', error);
         toastr.error('Ой! Что то пошло не так...', 'Профиль клиента', {timeOut: 3000});
      });
     }

     async getPaymentCards(){     
      let o = this;
      let api = new WebAPI();
      let webRequest = new WebRequest();
      let data = await webRequest.get(api.getPaymentCardsMethod(),{},  
	    false)
	.then(function(data) {
  	      return data?.cards || null;
           }).catch(function(error) {
         console.log('getPaymentInstruments.Произошла ошибка =>', error);
         toastr.error('Ой! Что то пошло не так...', 'Профиль клиента', {timeOut: 3000});
         return null;
      });
         return data;
     }



}

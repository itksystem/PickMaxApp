class ProfileSection extends PageBuilder {

    constructor(containerId) {
        super(containerId);
        this.common = new CommonFunctions();
        this.api = new WebAPI();
        this.webRequest = new WebRequest();

        this.oldEmail = '';
    	this.EMAIL_NO_ACTION_NEED = 0;
    	this.EMAIL_SAVE_ACTION_NEED = 1;
    	this.EMAIL_CONFIRM_ACTION_NEED = 2;
    	this.emailActionNeed = this.EMAIL_NO_ACTION_NEED;
    	this.EMAIL_SAVE_ACTION_DESCRIPTION = 'Сохранить';
    	this.EMAIL_CONFIRM_ACTION_DESCRIPTION = 'Подтвердить';

        this.oldPhone = '';
        this.PHONE_NO_ACTION_NEED = 0;
        this.PHONE_SAVE_ACTION_NEED = 1;
        this.PHONE_CONFIRM_ACTION_NEED = 2;
        this.phoneActionNeed = this.PHONE_NO_ACTION_NEED;
        this.PHONE_SAVE_ACTION_DESCRIPTION = 'Сохранить';
        this.PHONE_CONFIRM_ACTION_DESCRIPTION = 'Подтвердить';


// привязка контекста 
	this.saveProfileButtonOnClick = this.saveProfileButtonOnClick.bind(this);
	this.emailButtonClick = this.emailButtonClick.bind(this);
	this.phoneButtonClick = this.phoneButtonClick.bind(this);

	this.saveEmailButtonOnClick = this.saveEmailButtonOnClick.bind(this);
	this.confirmEmailButtonOnClick = this.confirmEmailButtonOnClick.bind(this);

	this.confirmPhoneButtonOnClick = this.confirmPhoneButtonOnClick.bind(this);
	this.savePhoneButtonOnClick = this.savePhoneButtonOnClick.bind(this);

	this.exitButtonOnClick = this.exitButtonOnClick.bind(this);
	this.phoneValidatorSuccessCallback = this.phoneValidatorSuccessCallback.bind(this);
	this.phoneValidatorErrorCallback = this.phoneValidatorErrorCallback.bind(this);
	this.getEmailElement = this.getEmailElement.bind(this);
    }
    validateAndCheckEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.ru$/;
        const errorElement = document.getElementById("email-error");
        const confirmMessageElement = document.querySelector(".registration-confirm-message");

        if (!emailRegex.test(email)) {
            errorElement.textContent = "Введите корректный email в зоне .ru";
            errorElement.style.display = "block";
            confirmMessageElement.textContent = "";
            return;
        }

        // Если email валиден, скрываем сообщение об ошибке
        errorElement.style.display = "none";

	let emailButton = document.querySelector('.email-save-button');
	if (!emailButton) {
	    console.error('Кнопка email-save-button не найдена');
	    return;
	}

        // Отправляем запрос на сервер
        this.checkEmailOnServer(email).then(response => {
            if (response.status) {
                confirmMessageElement.textContent = response.message;
                confirmMessageElement.style.color = "green";

     	        if(this.oldEmail == email) {
  	          console.log(this.oldEmail == email);	
  	          emailButton.classList.add('disabled');
                  emailButton.setAttribute('disabled', 'disabled'); // Отключаем функциональность кнопки
                } else {
		  emailButton.textContent = this.EMAIL_SAVE_ACTION_DESCRIPTION;
	          emailButton.classList.remove('disabled');
	          emailButton.removeAttribute('disabled'); // Включаем функциональность кнопки
              	  this.emailActionNeed = this.EMAIL_SAVE_ACTION_NEED;
		}

            } else {
                confirmMessageElement.textContent = response.message;
                confirmMessageElement.style.color = "red";
	        emailButton.classList.add('disabled');
        	emailButton.setAttribute('disabled', 'disabled'); // Отключаем функциональность кнопки
            }

        }).catch(error => {
            confirmMessageElement.textContent = "Ошибка при проверке email";
            confirmMessageElement.style.color = "red";
	    emailButton.classList.add('disabled');
            emailButton.setAttribute('disabled', 'disabled'); // Отключаем функциональность кнопки
        });
    }

    async checkEmailOnServer(email) {
        const api = new WebAPI();
        const webRequest = new WebRequest();
        try {
            const response = await webRequest.post(api.checkEmailMethod(), { email }, true);
	    console.log(this.oldEmail, email); 	
            return response;
        } catch (error) {
            console.error("Ошибка при проверке email:", error);
            throw error;
        }
    }


  InputAutoComplete(label, id, placeholder, required, feedbackError) {
    const container = document.createElement("div");
    container.className = "profile-input-group";

    const labelElement = Object.assign(document.createElement("label"), {
        htmlFor: id,
        className: "form-label",
        textContent: label
    });

    const autoCompleteElement = Object.assign(document.createElement("x-autocomplete"), {
        id,
        placeholder,
        url: "/api/bff/client/v1/town"
    });

    if (required) autoCompleteElement.setAttribute("required", "required");

    const errorElement = Object.assign(document.createElement("div"), {
        id: `${id}-error`,
        className: "invalid-feedback",
        style: "display: none;",
        textContent: feedbackError
    });

    container.append(labelElement, autoCompleteElement, errorElement);
    return container;
}

    UserProfileCardContainer(data = null) {
        let api = new WebAPI();
        let webRequest = new WebRequest();
	let o = this; 	

        const profileContainer = DOMHelper.createElement("div", "card card-container");
        profileContainer.appendChild(DOMHelper.createElement("div", "card-header", `<h3 class="card-title">Профиль</h3>`));

        const avatarName = data ? `${data.profile?.surname || ''} ${data.profile?.name || ''}`.trim() || 'Аноним' : 'Аноним';
        const tg = this.common.getTelegramWebAppObject();
        const tgUsername = (tg?.initDataUnsafe ? tg?.initDataUnsafe?.user?.username : null)
        const profileAvatar = DOMHelper.createElement("div", "profile-avatar-container", `
	<div class="row w-100">
                <div class="col-5">
		   <profile-picture></profile-picture>
		</div>
                <div class="col">
                    <div class="row w-100">
                        <div class="col-12 shot-fio-container">${avatarName}</div>
                        <div class="col-12 telegram-account-container">${!tgUsername ? '' : tgUsername}</div>
                        <div class="col-12 telegram-account-status-container"></div>
                    </div>
                </div>
        </div>
        `);
        profileContainer.appendChild(profileAvatar);

/* Секция с ФИО */
	const fioSection = DOMHelper.createDropdownSection("Мои данные", [
	    DOMHelper.createProfileItem(
	        "Фамилия", 
	        "surname", 
	        "Укажите вашу фамилию", 
	        true, 
	        "", 
	        data?.profile?.surname || ""
	    ),
	    DOMHelper.createProfileItem(
	        "Имя",
	        "firstname",
	        "Укажите ваше имя",
	        true,
	        "",
	        data?.profile?.name || ""
	    ),
	    DOMHelper.createProfileItem(
	        "Отчество",
	        "patronymic",
	        "Укажите ваше отчество",
	        true,
	        "",
	        data?.profile?.patronymic || ""
	    ),
	    DOMHelper.createButton(
	        "Сохранить",
	        "text-end",
	        this.saveProfileButtonOnClick.bind(this)  // Явная привязка контекста
	    )
	]);

	profileContainer.appendChild(fioSection);


	// Инициализация значений
	this.oldEmail = data?.profile?.email || '';
	this.oldPhone = data?.profile?.phone || '';

	// Установка статуса email
	this.emailActionNeed = this.determineEmailActionNeed(data?.profile);

	// Установка статуса телефона
	this.phoneActionNeed = this.determinePhoneActionNeed(data?.profile);

	// Функция для определения состояния кнопки
	const getButtonState = (actionNeed, confirmedAt, saveText, confirmText) => {
	  return {
	    name: actionNeed === this.EMAIL_CONFIRM_ACTION_NEED ? confirmText : saveText,
	    disabled: actionNeed === this.EMAIL_NO_ACTION_NEED || (actionNeed === this.EMAIL_SAVE_ACTION_NEED && confirmedAt) ? 'disabled' : '',
	    isValid: !!confirmedAt ? 'is-valid' : ''
	  };
	};

	// Определение состояния email кнопки
	const emailState = getButtonState(
	  this.emailActionNeed,
	  data?.profile?.emailConfirmedAt,
	  this.EMAIL_SAVE_ACTION_DESCRIPTION,
	  this.EMAIL_CONFIRM_ACTION_DESCRIPTION
	);

	// Определение состояния phone кнопки
	const phoneState = getButtonState(
	  this.phoneActionNeed,
	  data?.profile?.phoneConfirmedAt,
	  this.PHONE_SAVE_ACTION_DESCRIPTION,
	  this.PHONE_CONFIRM_ACTION_DESCRIPTION
	);

	// Деструктуризация результатов
	const { name: emailButtonName, disabled: emailButtonDisable } = emailState;
	const { name: phoneButtonName, disabled: phoneButtonDisable } = phoneState;
	const emailIsValid = data?.profile?.email ? 'is-valid' : '';
	const phoneIsValid = data?.profile?.phone ? 'is-valid' : '';

// Email
	const isEmailConfirmed = data?.profile?.emailConfirmedAt;
	const emailStatusText = isEmailConfirmed ? `Email подтвержден` : `Email необходимо подтвердить!`;  // Исправлена опечатка "потвержден"
	const emailStatusClass = isEmailConfirmed ? `confirmation-label-success` : `confirmation-label-error`;
	const emailValidationClass = emailIsValid ? 'is-valid' : '';

	const emailSection = DOMHelper.createDropdownSection("Электронный адрес", [
	    DOMHelper.createProfileItem(
	        "Email",
	        "email",
	        "Электронный адрес",
	        true,
	        "",  // feedbackError оставлен пустым, как в оригинале
	        data?.profile?.email || "",
	        emailValidationClass
	    ),
	    DOMHelper.createConfirmationLabel(
	        emailStatusText,
	        emailStatusClass
	    ),
	    DOMHelper.createButton(
	        emailButtonName,
	        `text-end email-save-button ${emailButtonDisable}`,
	        this.emailButtonClick.bind(this)  // Явная привязка контекста
	    )
	]);

	profileContainer.appendChild(emailSection);

// Phone
	const isPhoneConfirmed = data?.profile?.phoneConfirmedAt;
	const phoneStatusText = isPhoneConfirmed ? `Телефон подтвержден` : `Телефон необходимо подтвердить!`;
	const phoneStatusClass = isPhoneConfirmed ? `phone-confirmation-label-success` : `phone-confirmation-label-error`;
	const phoneValidationClass = phoneIsValid ? 'is-valid' : '';
	console.log(DOMHelper);
	const phoneSection = DOMHelper.createDropdownSection("Мой телефон", [
	    DOMHelper.createProfileItem(
	        "Телефон", 
	        "phone", 
	        "Укажите номер телефона", 
	        true, 
	        "Введите номер в формате +7 (XXX) XXX-XXXX", 
	        `${data?.profile?.phone || ''}`, 
	        phoneValidationClass
	    ),
	    DOMHelper.createConfirmationLabel(phoneStatusText, phoneStatusClass),
	    DOMHelper.createButton(
	        phoneButtonName,
	        `text-end phone-save-button ${phoneButtonDisable}`, 
	        this.phoneButtonClick
	    )
	]);

        profileContainer.appendChild(phoneSection);

        // Секция для подписок
	const subscriptionsDialog = new ClientSubscriptionsDialog();
	const subscriptionElements = subscriptionsDialog.getElements() || [];
	const subscriptionsSection = DOMHelper.createDropdownSection(
	  "Мои подписки",
	  subscriptionElements
	);
	profileContainer.appendChild(subscriptionsSection);

        // Секция для адресов
	// 1. Создаем контейнер для адресов
	this.addressesContainer = DOMHelper.createElement("div", "addresses-card-container");

	// 2. Инициализируем диалог адресов и добавляем элементы
	const addressDialog = new ClientAddressDialog();
	addressDialog.getElements().forEach(item => {
	    this.addressesContainer.appendChild(item);
	});

	// 3. Создаем элементы секции адресов
	const addressElements = [
	    this.addressesContainer,
	    addressDialog.AddressAutoComplete(
	        "Добавить адрес",
	        "address",
	        "Укажите адрес доставки",
	        true,
	        "Заполните данные для доставки товара"
	    ),
	    DOMHelper.createButton("Сохранить", "text-end", async () => {
	        try {
	            const autocomplete = document.getElementById('address');
	            const address = autocomplete.getObject();
            
	            // 4. Отправляем адрес на сервер
	            await this.webRequest.post(
	                this.api.addDeliveryAddressMethod(),
	                address,
	                true
	            );
            
	            // 5. Очищаем поле и показываем уведомление
	            autocomplete.setValue('');
	            toastr.success('Адрес успешно сохранен', 'Доставка', { timeOut: 3000 });
            
	            // 6. Обновляем список адресов через eventBus
	            if (eventBus) {
	                eventBus.emit("ClientAddressDialogReload", {});
	            }
	        } catch (error) {
	            console.error('Ошибка при сохранении адреса:', error);
	            toastr.error('Не удалось сохранить адрес', 'Ошибка', { timeOut: 3000 });
	        }
	    })
	];

	// 7. Создаем и добавляем секцию адресов
	profileContainer.appendChild(
	    DOMHelper.createDropdownSection("Мои адреса доставки", addressElements)
	);

        // Секция для карт
   	 let сardDialog = new ClientCardsDialog();
	 profileContainer.appendChild(DOMHelper.createDropdownSection("Мои средства платежа", 
		сardDialog.getElements() || []));

         profileContainer.appendChild(DOMHelper.createDropdownSection("Выход из системы",
		[DOMHelper.createButton("Выход", "w-100 text-center", this.exitButtonOnClick)]))
   
         this.addModule("Profile", profileContainer);
         this.profileContainer = profileContainer; 
         this.addEventListeners();

	  const emailElement =  this.profileContainer.querySelector('#email');
          if (emailElement) {
             emailElement.addEventListener("input", (event) => {
               this.validateAndCheckEmail(event.target.value);
             });
           } else {
          console.error('Email input element not found');
         }

// валидатор
         var validator = new InputMaskValidator(
		{ id : 'phone', error : 'phone-error'}, 
		this.profileContainer,
		this.phoneValidatorSuccessCallback,
		this.phoneValidatorErrorCallback
	  );
    }

    phoneValidatorSuccessCallback(){
	console.log(`phoneValidatorSuccessCallback`);
        let phone = this.profileContainer.querySelector('[id="phone"]');
        let phoneButton = this.profileContainer.querySelector('.phone-save-button');
        if(this.oldPhone !== phone.value ) {
         phoneButton.classList.remove('disabled');
         phoneButton.textContent = this.PHONE_SAVE_ACTION_DESCRIPTION;
         this.phoneActionNeed = this.PHONE_SAVE_ACTION_NEED;	    
	} else 
         phoneButton.classList.add('disabled');
    }

    phoneValidatorErrorCallback(){
	console.log(`phoneValidatorErrorCallback`);
        let phoneButton = this.profileContainer.querySelector('.phone-save-button');
	phoneButton.classList.add('disabled');
    }

    addEventListeners() {                                                           
      let o = this;
      console.log(`Перезагрузка экрана`)
	if (typeof eventBus !== 'undefined' && eventBus) {
	    eventBus.on('ClientAddressDialogReload', () => {
	        let addressDialog = new ClientAddressDialog();
	            o.addressesContainer.innerHTML = ``;
  	            addressDialog.getElements().forEach((item, index) => {
	            o.addressesContainer.appendChild(item);
	        });
	    });
	} else {
	    console.error('eventBus не определен');
	}
     }

  getEmail() {
        const emailInput = document.querySelector('[id="email"]');
        return emailInput ? emailInput.value.trim() : '';
    }

    getSurname() {
        const input = document.querySelector('[id="surname"]');
        return input ? input.value.trim() : '';
    }

    getFirstname() {
        const input = document.querySelector('[id="firstname"]');
        return input ? input.value.trim() : '';
    }

    getPatronymic() {
        const input = document.querySelector('[id="patronymic"]');
        return input ? input.value.trim() : '';
    }

    getPhone() {
        const input = document.querySelector('[id="phone"]');
        return input ? input.value.trim() : '';
    }

    getAddress() {
        const autocomplete = document.querySelector('x-autocomplete');
        return autocomplete ? autocomplete.value.trim() : '';
    }

    getEmailButton() {
        return document.querySelector('.email-save-button');
    }

    getPhoneButton() {
        return document.querySelector('.phone-save-button');
    }

    getCloseSessionButton() {
        return document.querySelector('[class="session-close"]');
    }

    getAvatarName() {
        return document.querySelector('.shot-fio-container');
    }

    getEmailElement() {
        return document.querySelector('[id="email"]');
    }

    determineEmailActionNeed(profile) {
       if (!profile?.email) return this.EMAIL_NO_ACTION_NEED;
       return profile.emailConfirmedAt ? this.EMAIL_NO_ACTION_NEED : this.EMAIL_CONFIRM_ACTION_NEED;
    }

    determinePhoneActionNeed(profile) {
       if (!profile?.phone) return this.PHONE_NO_ACTION_NEED;
       return profile.phoneConfirmedAt ? this.PHONE_NO_ACTION_NEED : this.PHONE_CONFIRM_ACTION_NEED;
    }

    saveProfileButtonOnClick(){
        let o = this;
        let request = this.webRequest.post(this.api.saveShopProfileMethod(),{
  	    surname : this.getSurname(),
	    name : this.getFirstname(),
	    patronymic : this.getPatronymic(),
	   },  
	    false ).then(function(data) {
             toastr.success('Профиль сохранен', 'Профиль', {timeOut: 3000});
	     o.getAvatarName().textContent = `${o.getSurname() || ''} ${o.getFirstname() || ''}`;
           }).catch(function(error) {
         console.log('showProfilePage.Произошла ошибка =>', error);
         toastr.error('Ой! Что то пошло не так...', 'Профиль клиента', {timeOut: 3000});
      });
   }
   
    emailButtonClick(){
    if(this.emailActionNeed != this.EMAIL_NO_ACTION_NEED)						
      switch(this.emailActionNeed) {	
	case this.EMAIL_CONFIRM_ACTION_NEED : { this.confirmEmailButtonOnClick(); break;}
	case this.EMAIL_SAVE_ACTION_NEED    : { this.saveEmailButtonOnClick(); break;}
       }	
    }

    phoneButtonClick(){
    if(this.phoneActionNeed != this.PHONE_NO_ACTION_NEED)						
      switch(this.phoneActionNeed) {	
	case this.PHONE_CONFIRM_ACTION_NEED : { this.confirmPhoneButtonOnClick(); break;}
	case this.PHONE_SAVE_ACTION_NEED    : { this.savePhoneButtonOnClick(); break;}
       }	
     }

    confirmEmailButtonOnClick(){
       document.location.replace('/confirmation/email/page');
    }

    saveEmailButtonOnClick(){
     let o = this;
     let request = this.webRequest.post(this.api.saveEmailMethod(),{ email : this.getEmail() }, false ).then(function(data) {
              toastr.success('Почта сохранена', 'Профиль', {timeOut: 3000});
              o.getEmailButton().textContent = o.EMAIL_CONFIRM_ACTION_DESCRIPTION;
	      o.emailActionNeed = o.EMAIL_CONFIRM_ACTION_NEED;	    	
           }).catch(function(error) {
         toastr.error('Ой! Что то пошло не так...', 'Профиль клиента', {timeOut: 3000});
      });
     }
      confirmPhoneButtonOnClick(){
      document.location.replace('/confirmation/phone/page');
    }

    savePhoneButtonOnClick(){
     let o = this;
     let request = this.webRequest.post(this.api.savePhoneMethod(),{ phone : this.getPhone()}, false )
	  .then(function(data) {
              toastr.success('Телефон сохранен', 'Профиль', {timeOut: 3000});
              o.getPhoneButton().textContent = o.PHONE_CONFIRM_ACTION_DESCRIPTION;
	      o.phoneActionNeed = o.PHONE_CONFIRM_ACTION_NEED;	    	
           }).catch(function(error) {
         toastr.error('Ой! Что то пошло не так...', 'Профиль клиента', {timeOut: 3000});
      });
   }

   exitButtonOnClick(){
      let request = this.webRequest.post(this.api.closeSessionMethod(), {}, true);
      document.location.replace(this.api.LOGON_URL());
   }
}

class ProfileSection extends PageBuilder {

    constructor(containerId) {
        super(containerId);
        this.common = new CommonFunctions();
        this.api = new WebAPI();
        this.webRequest = new WebRequest();

        this.oldEmail = '';
    	this.EMAIL_NO_ACTION_NEED = 0;
    	this.EMAIL_SAVE_ACTION_NEED = 1;
    	this.EMAIL_CONFIRM_ACTION_NEED = 2;
    	this.emailActionNeed = this.EMAIL_NO_ACTION_NEED;
    	this.EMAIL_SAVE_ACTION_DESCRIPTION = 'Сохранить';
    	this.EMAIL_CONFIRM_ACTION_DESCRIPTION = 'Подтвердить';

        this.oldPhone = '';
        this.PHONE_NO_ACTION_NEED = 0;
        this.PHONE_SAVE_ACTION_NEED = 1;
        this.PHONE_CONFIRM_ACTION_NEED = 2;
        this.phoneActionNeed = this.PHONE_NO_ACTION_NEED;
        this.PHONE_SAVE_ACTION_DESCRIPTION = 'Сохранить';
        this.PHONE_CONFIRM_ACTION_DESCRIPTION = 'Подтвердить';


// привязка контекста 
	this.saveProfileButtonOnClick = this.saveProfileButtonOnClick.bind(this);
	this.emailButtonClick = this.emailButtonClick.bind(this);
	this.phoneButtonClick = this.phoneButtonClick.bind(this);

	this.saveEmailButtonOnClick = this.saveEmailButtonOnClick.bind(this);
	this.confirmEmailButtonOnClick = this.confirmEmailButtonOnClick.bind(this);

	this.confirmPhoneButtonOnClick = this.confirmPhoneButtonOnClick.bind(this);
	this.savePhoneButtonOnClick = this.savePhoneButtonOnClick.bind(this);

	this.exitButtonOnClick = this.exitButtonOnClick.bind(this);
	this.phoneValidatorSuccessCallback = this.phoneValidatorSuccessCallback.bind(this);
	this.phoneValidatorErrorCallback = this.phoneValidatorErrorCallback.bind(this);
	this.getEmailElement = this.getEmailElement.bind(this);
    }

    createElement(tag, className = '', innerHTML = '') {
        const element = document.createElement(tag);
        if (className) element.className = className;
        if (innerHTML) element.innerHTML = innerHTML;
        return element;
    }

    createButton(label, extraClass = '', onClick = null) {
        const placement = this.createElement("div", `width-100 text-end`, ``);
        const button = this.createElement("button", `profile-button btn btn-primary ${extraClass}`, label);
	placement.append(button);
        if (onClick) button.addEventListener("click", onClick);
        return placement;
    }

    createConfirmationLabel(label = null, extraClass ='') {
	const placement = this.createElement("div", `width-100 text-end `, ``);
        placement.className = `registration-confirm-message ${extraClass}`;
        placement.innerHTML = (label ? label : ``);
        return placement;
    }

    createProfileItem(label, id, placeholder, required = false, feedbackError = '', value = null, addClass = null) {
        const container = this.createElement("div", "profile-item-container");
        const labelElement = this.createElement("label", "form-label", label);
        labelElement.setAttribute("for", id);
        
        const inputElement = this.createElement("input", `form-control ${addClass}`);
        inputElement.type = "text";
        inputElement.id = id;
        inputElement.placeholder = placeholder;
        if(value) inputElement.value = value;

        if (required) inputElement.setAttribute("required", "required");
        if (!required) inputElement.setAttribute("disabled", "disabled");
        
        const errorElement = this.createElement("div", "invalid-feedback", feedbackError);
        errorElement.id = `${id}-error`;
        errorElement.style.display = "none";

        container.append(labelElement, inputElement, errorElement);
        return container;
    }

    validateAndCheckEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.ru$/;
        const errorElement = document.getElementById("email-error");
        const confirmMessageElement = document.querySelector(".registration-confirm-message");

        if (!emailRegex.test(email)) {
            errorElement.textContent = "Введите корректный email в зоне .ru";
            errorElement.style.display = "block";
            confirmMessageElement.textContent = "";
            return;
        }

        // Если email валиден, скрываем сообщение об ошибке
        errorElement.style.display = "none";

	let emailButton = document.querySelector('.email-save-button');
	if (!emailButton) {
	    console.error('Кнопка email-save-button не найдена');
	    return;
	}

        // Отправляем запрос на сервер
        this.checkEmailOnServer(email).then(response => {
            if (response.status) {
                confirmMessageElement.textContent = response.message;
                confirmMessageElement.style.color = "green";

     	        if(this.oldEmail == email) {
  	          console.log(this.oldEmail == email);	
  	          emailButton.classList.add('disabled');
                  emailButton.setAttribute('disabled', 'disabled'); // Отключаем функциональность кнопки
                } else {
		  emailButton.textContent = this.EMAIL_SAVE_ACTION_DESCRIPTION;
	          emailButton.classList.remove('disabled');
	          emailButton.removeAttribute('disabled'); // Включаем функциональность кнопки
              	  this.emailActionNeed = this.EMAIL_SAVE_ACTION_NEED;
		}

            } else {
                confirmMessageElement.textContent = response.message;
                confirmMessageElement.style.color = "red";
	        emailButton.classList.add('disabled');
        	emailButton.setAttribute('disabled', 'disabled'); // Отключаем функциональность кнопки
            }

        }).catch(error => {
            confirmMessageElement.textContent = "Ошибка при проверке email";
            confirmMessageElement.style.color = "red";
	    emailButton.classList.add('disabled');
            emailButton.setAttribute('disabled', 'disabled'); // Отключаем функциональность кнопки
        });
    }

    async checkEmailOnServer(email) {
        const api = new WebAPI();
        const webRequest = new WebRequest();
        try {
            const response = await webRequest.post(api.checkEmailMethod(), { email }, true);
	    console.log(this.oldEmail, email); 	
            return response;
        } catch (error) {
            console.error("Ошибка при проверке email:", error);
            throw error;
        }
    }


//
    createDropdownSection(title, children = []) {
        const section = this.createElement("dropdown-section", '', `<span slot="title">${title}</span>`);
         if (children.length === 0) {
// Создаем контейнер для текста и иконки
	     const noInfoContainer = document.createElement('div');
	        noInfoContainer.style.display = 'flex';
	        noInfoContainer.style.alignItems = 'center';
	        noInfoContainer.style.justifyContent = 'center';
	        noInfoContainer.style.gap = '8px'; // Расстояние между иконкой и текстом

	        // Добавляем иконку предупреждения
	        const warningIcon = document.createElement('span');
	        warningIcon.innerHTML = '⚠️'; // Используем эмодзи или можно вставить SVG
	        warningIcon.style.fontSize = '18px'; // Размер иконки

	        // Добавляем текст
	        const noInfoText = document.createElement('p');
	        noInfoText.textContent = 'Нет информации';
        	noInfoText.style.margin = '0'; // Убираем отступы у параграфа

	        // Собираем контейнер
	        noInfoContainer.appendChild(warningIcon);
	        noInfoContainer.appendChild(noInfoText);
	
	        // Добавляем контейнер в секцию
	        section.appendChild(noInfoContainer);
           } else {
          children.forEach(child => section.appendChild(child));
        }
        return section;
    }

    createRadio(id, name, label, checked = false, onClick = null, onDelete = null) {
       // Создание основного контейнера
       const placement = document.createElement("div");
       placement.className = "custom-radio row";

       // Создание контейнера для радио-кнопки и label
       const radioContainer = document.createElement("div");
       radioContainer.className = "col-10";

       // Создание радио-кнопки
       const radioInput = document.createElement("input");
       radioInput.className = "custom-control-input";
       radioInput.type = "radio";
       radioInput.id = `radio-${id}`;
       radioInput.name = name;
       radioInput.checked = checked;
       radioInput.value = id;

       // Создание label
       const radioLabel = document.createElement("label");
       radioLabel.className = "custom-control-label";
       radioLabel.setAttribute("for", `radio-${id}`);
       radioLabel.textContent = label;

       // Добавление радио-кнопки и label в контейнер
       radioContainer.appendChild(radioInput);
       radioContainer.appendChild(radioLabel);

       // Создание контейнера для кнопки удаления
       const buttonContainer = document.createElement("div");
       buttonContainer.className = "col-2";

       // Создание кнопки удаления
       const removeButton = document.createElement("button");
       removeButton.className = "btn small-hot-button";
       removeButton.type = "button";
       removeButton.value = id;

       // Создание иконки внутри кнопки
       const removeIcon = document.createElement("i");
       removeIcon.className = "fa-solid fa-x";
       removeIcon.style.fontSize = "0.8rem";

       // Добавление иконки в кнопку
       removeButton.appendChild(removeIcon);
       buttonContainer.appendChild(removeButton);

       // Добавление элементов в основной контейнер
       placement.appendChild(radioContainer);
       placement.appendChild(buttonContainer);

       // Добавление обработчиков событий
       if (onClick) {
           radioInput.addEventListener("click", onClick);
       }
       if (onDelete) {
           removeButton.addEventListener("click", onDelete);
       }
       return placement;
}

 createCheckbox(id, name, label, checked = false, onClick = null) {
    // Создание основного контейнера
    const placement = document.createElement("div");
    placement.className = "custom-checkbox row";

    // Создание контейнера для чекбокса и метки
    const checkboxContainer = document.createElement("div");
    checkboxContainer.className = "col";

    // Создание чекбокса
    const checkboxInput = document.createElement("input");
    checkboxInput.className = "form-check-input";
    checkboxInput.type = "checkbox";
    checkboxInput.id = `check-${id}`;
    checkboxInput.name = name;
    checkboxInput.checked = checked;
    checkboxInput.value = id;

    // Создание метки
    const checkboxLabel = document.createElement("label");
    checkboxLabel.className = "custom-checkbox-label";
    checkboxLabel.setAttribute("for", `check-${id}`);
    checkboxLabel.textContent = label;

    // Добавление чекбокса и метки в контейнер
    checkboxContainer.appendChild(checkboxInput);
    checkboxContainer.appendChild(checkboxLabel);

    // Добавление контейнера в основной контейнер
    placement.appendChild(checkboxContainer);

    // Добавление обработчика события, если передан
    if (onClick) {
        placement.addEventListener("click", onClick);
    }

    return placement;
}


  InputAutoComplete(label, id, placeholder, required, feedbackError) {
    const container = document.createElement("div");
    container.className = "profile-input-group";

    const labelElement = Object.assign(document.createElement("label"), {
        htmlFor: id,
        className: "form-label",
        textContent: label
    });

    const autoCompleteElement = Object.assign(document.createElement("x-autocomplete"), {
        id,
        placeholder,
        url: "/api/bff/client/v1/town"
    });

    if (required) autoCompleteElement.setAttribute("required", "required");

    const errorElement = Object.assign(document.createElement("div"), {
        id: `${id}-error`,
        className: "invalid-feedback",
        style: "display: none;",
        textContent: feedbackError
    });

    container.append(labelElement, autoCompleteElement, errorElement);
    return container;
}

    UserProfileCardContainer(data = null) {
        let api = new WebAPI();
        let webRequest = new WebRequest();
	let o = this; 	

        const profileContainer = this.createElement("div", "card card-container");
        profileContainer.appendChild(this.createElement("div", "card-header", `<h3 class="card-title">Профиль</h3>`));

        const avatarName = data ? `${data.profile?.surname || ''} ${data.profile?.name || ''}`.trim() || 'Аноним' : 'Аноним';
        const tg = this.common.getTelegramWebAppObject();
        const tgUsername = (tg?.initDataUnsafe ? tg?.initDataUnsafe?.user?.username : null)
        const profileAvatar = this.createElement("div", "profile-avatar-container", `
	<div class="row w-100">
                <div class="col-5">
		   <profile-picture></profile-picture>
		</div>
                <div class="col">
                    <div class="row w-100">
                        <div class="col-12 shot-fio-container">${avatarName}</div>
                        <div class="col-12 telegram-account-container">${!tgUsername ? '' : tgUsername}</div>
                        <div class="col-12 telegram-account-status-container"></div>
                    </div>
                </div>
        </div>
        `);
        profileContainer.appendChild(profileAvatar);
/* Секция с ФИО */
        const fioSection = this.createDropdownSection("Мои данные", [
            this.createProfileItem("Фамилия", "surname", "Укажите вашу фамилию", true, ``, `${data?.profile?.surname || ''}`),
            this.createProfileItem("Имя", "firstname", "Укажите ваше имя", true, ``,`${data?.profile?.name || ''}`),
            this.createProfileItem("Отчество", "patronymic", "Укажите ваше отчество", true,``, `${data?.profile?.patronymic || ''}`),
            this.createButton("Сохранить", "text-end", this.saveProfileButtonOnClick)
        ]);
        profileContainer.appendChild(fioSection);

        this.oldEmail = data?.profile?.email;
        this.oldPhone = data?.profile?.phone;

        console.log(data?.profile?.email, data?.profile?.emailConfirmedAt);
        if(data?.profile?.email && data?.profile?.emailConfirmedAt) 
			this.emailActionNeed = this.EMAIL_NO_ACTION_NEED;
        if(data?.profile?.email && !data?.profile?.emailConfirmedAt) 
			this.emailActionNeed = this.EMAIL_CONFIRM_ACTION_NEED;

        console.log(data?.profile?.phone, data?.profile?.phoneConfirmedAt);
        if(data?.profile?.phone && data?.profile?.phoneConfirmedAt) 
			this.phoneActionNeed = this.PHONE_NO_ACTION_NEED;
        if(data?.profile?.phone && !data?.profile?.phoneConfirmedAt) 
			this.phoneActionNeed = this.PHONE_CONFIRM_ACTION_NEED;


	let emailButtonName = '';
	let emailButtonDisable = '';
	let emailIsValid = (data?.profile?.email) ? 'is-valid' : '';

	switch(this.emailActionNeed){
		case this.EMAIL_NO_ACTION_NEED : {
			emailButtonDisable = 'disabled';
			emailButtonName = this.EMAIL_SAVE_ACTION_DESCRIPTION;
			break;
		}
		case this.EMAIL_SAVE_ACTION_NEED : {
			emailButtonDisable = (data?.profile?.emailConfirmedAt) ? 'disabled' : '';
			emailButtonName = this.EMAIL_SAVE_ACTION_DESCRIPTION;
			break;
		}
		case this.EMAIL_CONFIRM_ACTION_NEED : {
			emailButtonDisable = '';
			emailButtonName = this.EMAIL_CONFIRM_ACTION_DESCRIPTION;
			break;
		}
	}	


	let phoneButtonName = '';
	let phoneButtonDisable = '';
	let phoneIsValid = (data?.profile?.phone) ? 'is-valid' : '';

	switch(this.phoneActionNeed){
		case this.PHONE_NO_ACTION_NEED : {
			phoneButtonDisable = 'disabled';
			phoneButtonName = this.PHONE_SAVE_ACTION_DESCRIPTION;
			break;
		}
		case this.PHONE_SAVE_ACTION_NEED : {
			phoneButtonDisable = (data?.profile?.phoneConfirmedAt) ? 'disabled' : '';
			phoneButtonName = this.PHONE_SAVE_ACTION_DESCRIPTION;
			break;
		}
		case this.PHONE_CONFIRM_ACTION_NEED : {
			phoneButtonDisable = '';
			phoneButtonName = this.PHONE_CONFIRM_ACTION_DESCRIPTION;
			break;
		}
	}	


	const emailSection = this.createDropdownSection("Электронный адрес", [
		this.createProfileItem("Email", "email", "Электронный адрес", true, ``, `${data?.profile?.email || ''}`, emailIsValid ?? ''),
		this.createConfirmationLabel(
			(data?.profile?.emailConfirmedAt ? `Email потвержден` : `Email необходимо подтвердить!` ),
			(data?.profile?.emailConfirmedAt ? `confirmation-label-success` : `confirmation-label-error` )
		),
	        this.createButton(emailButtonName, 
			`text-end email-save-button ${emailButtonDisable}`, 
			this.emailButtonClick)
        ]);
        profileContainer.appendChild(emailSection);
/*
        const phoneSection = this.createDropdownSection("Мой телефон", [
            this.createProfileItem("Телефон", "phone", "Укажите номер телефона", true, 
		"Введите номер в формате +7 (XXX) XXX-XXXX", `${data?.profile?.phone || ''}`, phoneIsValid ?? ''),
		this.createConfirmationLabel(
			(data?.profile?.phoneConfirmedAt ? `Телефон потвержден` : `Телефон необходимо подтвердить!` ),
			(data?.profile?.phoneConfirmedAt ? `phone-confirmation-label-success` : `phone-confirmation-label-error` )
		),
            this.createButton(phoneButtonName,
		 `text-end phone-save-button ${phoneButtonDisable}`, 
		 this.phoneButtonClick)
        ]);
        profileContainer.appendChild(phoneSection);
*/
	const isPhoneConfirmed = data?.profile?.phoneConfirmedAt;
	const phoneStatusText = isPhoneConfirmed ? `Телефон подтвержден` : `Телефон необходимо подтвердить!`;
	const phoneStatusClass = isPhoneConfirmed ? `phone-confirmation-label-success` : `phone-confirmation-label-error`;
	const phoneValidationClass = phoneIsValid ? 'is-valid' : '';
	console.log(DOMHelper);
	const phoneSection = DOMHelper.createDropdownSection("Мой телефон", [
	    DOMHelper.createProfileItem(
	        "Телефон", 
	        "phone", 
	        "Укажите номер телефона", 
	        true, 
	        "Введите номер в формате +7 (XXX) XXX-XXXX", 
	        `${data?.profile?.phone || ''}`, 
	        phoneValidationClass
	    ),
	    DOMHelper.createConfirmationLabel(phoneStatusText, phoneStatusClass),
	    DOMHelper.createButton(
	        phoneButtonName,
	        `text-end phone-save-button ${phoneButtonDisable}`, 
	        this.phoneButtonClick
	    )
	]);

        profileContainer.appendChild(phoneSection);


        // Секция для подписок
   	 let SubscriptionsDialog = new ClientSubscriptionsDialog();
	 profileContainer.appendChild(this.createDropdownSection("Мои подписки", SubscriptionsDialog.getElements() || []));

        // Секция для адресов
         let AddressDialogElementsArray = [];
         this.AddressesContainer = this.createElement("div", "addresses-card-container");
         let AddressDialog = new ClientAddressDialog();
  	 AddressDialog.getElements().forEach((item, index) => {
	     o.AddressesContainer.appendChild(item); 
	 });
         AddressDialogElementsArray.push(this.AddressesContainer);
         AddressDialogElementsArray.push(AddressDialog.AddressAutoComplete("Добавить адрес", "address", "Укажите адрес доставки", true, "Заполните данные для доставки товара"))
         AddressDialogElementsArray.push(
         this.createButton("Сохранить", "text-end", (()=>{
	        let autocomplete = document.getElementById('address');
	        let address = autocomplete.getObject();
                const response = webRequest.post(api.addDeliveryAddressMethod(), address, true);
                autocomplete.setValue(``);
                toastr.success('Aдрес успешно сохранен', 'Доставка', { timeOut: 3000 });
	        if(eventBus) {
	          console.log(eventBus)
	          eventBus.emit("ClientAddressDialogReload", {});
	       }
             })
           )
         )
         console.log(AddressDialogElementsArray);	
         profileContainer.appendChild(this.createDropdownSection("Мои адреса доставки",  
		AddressDialogElementsArray));

        // Секция для карт
   	 let CardDialog = new ClientCardsDialog();
	 profileContainer.appendChild(this.createDropdownSection("Мои средства платежа", 
		CardDialog.getElements() || []));

         profileContainer.appendChild(this.createDropdownSection("Выход из системы",
		[this.createButton("Выход", "w-100 text-center", this.exitButtonOnClick)]))
   
         this.addModule("Profile", profileContainer);
         this.profileContainer = profileContainer; 
         this.addEventListeners();

	  const emailElement =  this.profileContainer.querySelector('#email');
          if (emailElement) {
             emailElement.addEventListener("input", (event) => {
               this.validateAndCheckEmail(event.target.value);
             });
           } else {
          console.error('Email input element not found');
         }

// валидатор
         var validator = new InputMaskValidator(
		{ id : 'phone', error : 'phone-error'}, 
		this.profileContainer,
		this.phoneValidatorSuccessCallback,
		this.phoneValidatorErrorCallback
	  );
    }

    phoneValidatorSuccessCallback(){
	console.log(`phoneValidatorSuccessCallback`);
        let phone = this.profileContainer.querySelector('[id="phone"]');
        let phoneButton = this.profileContainer.querySelector('.phone-save-button');
        if(this.oldPhone !== phone.value ) {
         phoneButton.classList.remove('disabled');
         phoneButton.textContent = this.PHONE_SAVE_ACTION_DESCRIPTION;
         this.phoneActionNeed = this.PHONE_SAVE_ACTION_NEED;	    
	} else 
         phoneButton.classList.add('disabled');
    }

    phoneValidatorErrorCallback(){
	console.log(`phoneValidatorErrorCallback`);
        let phoneButton = this.profileContainer.querySelector('.phone-save-button');
	phoneButton.classList.add('disabled');
    }

    addEventListeners() {                                                           
      let o = this;
      console.log(`Перезагрузка экрана`)
	if (typeof eventBus !== 'undefined' && eventBus) {
	    eventBus.on('ClientAddressDialogReload', () => {
	        let AddressDialog = new ClientAddressDialog();
	          o.AddressesContainer.innerHTML = ``;
 	          AddressDialog.getElements().forEach((item, index) => {
	            o.AddressesContainer.appendChild(item);
	        });
	    });
	} else {
	    console.error('eventBus не определен');
	}
     }

  getEmail() {
        const emailInput = document.querySelector('[id="email"]');
        return emailInput ? emailInput.value.trim() : '';
    }

    getSurname() {
        const input = document.querySelector('[id="surname"]');
        return input ? input.value.trim() : '';
    }

    getFirstname() {
        const input = document.querySelector('[id="firstname"]');
        return input ? input.value.trim() : '';
    }

    getPatronymic() {
        const input = document.querySelector('[id="patronymic"]');
        return input ? input.value.trim() : '';
    }

    getPhone() {
        const input = document.querySelector('[id="phone"]');
        return input ? input.value.trim() : '';
    }

    getAddress() {
        const autocomplete = document.querySelector('x-autocomplete');
        return autocomplete ? autocomplete.value.trim() : '';
    }

    getEmailButton() {
        return document.querySelector('.email-save-button');
    }

    getPhoneButton() {
        return document.querySelector('.phone-save-button');
    }

    getCloseSessionButton() {
        return document.querySelector('[class="session-close"]');
    }

    getAvatarName() {
        return document.querySelector('.shot-fio-container');
    }

    getEmailElement() {
        return document.querySelector('[id="email"]');
    }
    saveProfileButtonOnClick(){
        let o = this;
        let request = this.webRequest.post(this.api.saveShopProfileMethod(),{
  	    surname : this.getSurname(),
	    name : this.getFirstname(),
	    patronymic : this.getPatronymic(),
	   },  
	    false ).then(function(data) {
             toastr.success('Профиль сохранен', 'Профиль', {timeOut: 3000});
	     o.getAvatarName().textContent = `${o.getSurname() || ''} ${o.getFirstname() || ''}`;
           }).catch(function(error) {
         console.log('showProfilePage.Произошла ошибка =>', error);
         toastr.error('Ой! Что то пошло не так...', 'Профиль клиента', {timeOut: 3000});
      });
   }
   
    emailButtonClick(){
    if(this.emailActionNeed != this.EMAIL_NO_ACTION_NEED)						
      switch(this.emailActionNeed) {	
	case this.EMAIL_CONFIRM_ACTION_NEED : { this.confirmEmailButtonOnClick(); break;}
	case this.EMAIL_SAVE_ACTION_NEED    : { this.saveEmailButtonOnClick(); break;}
       }	
    }

    phoneButtonClick(){
    if(this.phoneActionNeed != this.PHONE_NO_ACTION_NEED)						
      switch(this.phoneActionNeed) {	
	case this.PHONE_CONFIRM_ACTION_NEED : { this.confirmPhoneButtonOnClick(); break;}
	case this.PHONE_SAVE_ACTION_NEED    : { this.savePhoneButtonOnClick(); break;}
       }	
     }

    confirmEmailButtonOnClick(){
       document.location.replace('/confirmation/email/page');
    }

    saveEmailButtonOnClick(){
     let o = this;
     let request = this.webRequest.post(this.api.saveEmailMethod(),{ email : this.getEmail() }, false ).then(function(data) {
              toastr.success('Почта сохранена', 'Профиль', {timeOut: 3000});
              o.getEmailButton().textContent = o.EMAIL_CONFIRM_ACTION_DESCRIPTION;
	      o.emailActionNeed = o.EMAIL_CONFIRM_ACTION_NEED;	    	
           }).catch(function(error) {
         toastr.error('Ой! Что то пошло не так...', 'Профиль клиента', {timeOut: 3000});
      });
     }
      confirmPhoneButtonOnClick(){
      document.location.replace('/confirmation/phone/page');
    }

    savePhoneButtonOnClick(){
     let o = this;
     let request = this.webRequest.post(this.api.savePhoneMethod(),{ phone : this.getPhone()}, false )
	  .then(function(data) {
              toastr.success('Телефон сохранен', 'Профиль', {timeOut: 3000});
              o.getPhoneButton().textContent = o.PHONE_CONFIRM_ACTION_DESCRIPTION;
	      o.phoneActionNeed = o.PHONE_CONFIRM_ACTION_NEED;	    	
           }).catch(function(error) {
         toastr.error('Ой! Что то пошло не так...', 'Профиль клиента', {timeOut: 3000});
      });
   }

   exitButtonOnClick(){
      let request = this.webRequest.post(this.api.closeSessionMethod(), {}, true);
      document.location.replace(this.api.LOGON_URL());
   }
}

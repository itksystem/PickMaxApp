class BasketItem {
    constructor(containerClass, item) {
        // –ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–ª–∞—Å—Å–æ–º
        const container = document.querySelector(`.${containerClass}`);
        if (!container) {
            throw new Error(`Container with class '${containerClass}' not found.`);
        }

        // –°–æ–∑–¥–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —Ç–æ–≤–∞—Ä–∞
        const basketItemContainer = document.createElement("div");
        basketItemContainer.className = "basket-item";

        // –°–æ–∑–¥–∞—Ç—å —Ç–µ–ª–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        const basketItemBody = document.createElement("div");
        basketItemBody.className = "card-body";

        // –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        basketItemBody.innerHTML = `
            <div class="row">        
                <div class="col-5 col-xs-6 col-sm-3 col-md-3">
                    <img class="image" src="${item?.mediaFiles[0]?.mediaKey || 'default-image.png'}" alt="${item?.productName}">
                </div>        
                <div class="col-7 col-xs-6 col-sm-9 col-md-9">        
                    <div class="row">
                        <div class="col-12 col-xs-12  col-sm-12 col-md-12">
                            <div class="basket-card-title">${item?.productName || 'Product Name'}</div>
                        </div>
                        <div class="col-12 col-xs-12 col-sm-6 col-md-4">
                            <basket-button 
                                class="button-add-to-basket" 
                                product-id="${item?.productId}"
                                basket-skin="white" 
                                basket-count="${item?.quantity || 0}">
                            </basket-button>
                        </div>
                        <div class="col-12 col-xs-12 col-sm-6 col-md-4">
                            <div class="basket-card-price" for="${item?.productId}">
                                ${(item?.quantity || 0) * (item?.price || 0)} ‚ÇΩ
                            </div>
                        </div>
                        <div class="col-10 col-xs-6 col-sm-10 col-md-4">
                                <i class="fa-solid fa-trash-alt basket-card-trash-hotkey"></i>
	                        <div class="basket-delete-timer text-left" style="display: none;">
                                <svg class="countdown-circle" width="20" height="20" viewBox="0 0 40 40">
                                    <circle class="countdown-bg" cx="20" cy="20" r="10"></circle>
                                    <circle class="countdown-progress" cx="20" cy="20" r="15"></circle>
                                    <text x="50%" y="50%" dominant-baseline="middle" text-anchor="middle" class="countdown-text">5</text>
                                </svg>
                              <a href="#" class="basket-cancel-delete">–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ</a>
                       </div>

                        </div>
                    </div>
                </div>                                             
            </div>`;

        // –í—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–ª–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ–≤–∞—Ä–∞
        basketItemContainer.appendChild(basketItemBody);

        // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ–≤–∞—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        container.appendChild(basketItemContainer);

        // üéØ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        this.setupDeleteHandler(basketItemContainer, item);
    }

    setupDeleteHandler(basketItemContainer, item) {
        const trashIcon = basketItemContainer.querySelector('.basket-card-trash-hotkey');
        const deleteTimerEl = basketItemContainer.querySelector('.basket-delete-timer');
        const countdownText = deleteTimerEl.querySelector('.countdown-text');
        const countdownCircle = deleteTimerEl.querySelector('.countdown-progress');
        const cancelLink = deleteTimerEl.querySelector('.basket-cancel-delete');

        let countdown = 5; // –¢–∞–π–º–µ—Ä –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        let countdownInterval;

        const circumference = 2 * Math.PI * 15; // –î–ª–∏–Ω–∞ –æ–∫—Ä—É–∂–Ω–æ—Å—Ç–∏ (r=45)
        countdownCircle.style.strokeDasharray = circumference;
        countdownCircle.style.strokeDashoffset = 0;

        trashIcon.addEventListener('click', () => {
            if (countdownInterval) return; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
            trashIcon.style.display = 'none';
            deleteTimerEl.style.display = 'block';
            countdownText.textContent = countdown;
            countdownCircle.style.strokeDashoffset = 0;

            let elapsed = 0;
            countdownInterval = setInterval(() => {
                elapsed += 1;
                countdown -= 1;
                countdownText.textContent = countdown;
                countdownCircle.style.strokeDashoffset = (elapsed / 5) * circumference;

                if (countdown <= 0) {
                    clearInterval(countdownInterval);
                    this.declineItem(item?.productId)
                        .then(() => {
                            basketItemContainer.remove();
			    toastr.success('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', '–¢–æ–≤–∞—Ä—ã', {timeOut: 3000});
                        })
                        .catch((error) => {
                            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
			    toastr.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', '–¢–æ–≤–∞—Ä—ã', {timeOut: 3000});
			    trashIcon.style.display = 'block';	
                        }).finally((error) => {
		            deleteTimerEl.style.display = 'none';
                        });
                }
            }, 1000);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã
            cancelLink.addEventListener('click', (e) => {
                e.preventDefault();
                clearInterval(countdownInterval);
                countdownInterval = null;
                countdown = 5;
                deleteTimerEl.style.display = 'none';
                trashIcon.style.display = 'block';
                countdownCircle.style.strokeDashoffset = 0;
            });
        });
    }

    async declineItem(productId) {
        try {
	   this.api = new WebAPI();
            const response = await fetch(this.api.removeItemBasketMethod()+`/${productId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            if (!response.ok) {
                throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
            }
           if(eventBus) {
             console.log(eventBus)
             eventBus.emit(EVENT_BASKET_ITEM_UPDATE, { productId: this.productId, quantity: 1 });
           }


            console.log('–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
            throw error;
        }
    }
}

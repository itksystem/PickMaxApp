// delete-confirm.js - отдельный веб-компонент для подтверждения удаления
class DeleteConfirm extends HTMLElement {
  static DEFAULT_COUNTDOWN = 5;
  static CIRCLE_RADIUS = 15;

  constructor() {
    super();
    this.countdown = DeleteConfirm.DEFAULT_COUNTDOWN;
    this.circumference = 2 * Math.PI * DeleteConfirm.CIRCLE_RADIUS;
    this.attachShadow({ mode: 'open' });
    this.render();
  }

  connectedCallback() {
    this.shadowRoot.querySelector('.delete-trigger').addEventListener('click', this.startCountdown.bind(this));
    this.shadowRoot.querySelector('.cancel-delete').addEventListener('click', this.cancelDelete.bind(this));
  }

  render() {
    this.shadowRoot.innerHTML = `
      <style>
        :host {
          display: inline-block;
        }
        .delete-container {
          position: relative;
        }
        .delete-trigger {
          cursor: pointer;
          color: #000000;
        }
        .confirm-delete {
          display: none;
          align-items: center;
          gap: 10px;
          position: absolute;
          top: 0;
          left: 0;
          background: white;
          padding: 5px;
          border-radius: 4px;
          box-shadow: 0 2px 5px rgba(0,0,0,0.2);
          z-index: 10;
        }
        .countdown-circle {
          width: 2rem;
          height: 2rem;
        }
        .countdown-bg {
          fill: none;
          stroke: #e9ecef;
          stroke-width: 5;
        }
        .countdown-progress {
          fill: none;
          stroke: #000000;
          stroke-width: 5;
          stroke-linecap: round;
          transform: rotate(-90deg);
          transform-origin: 50% 50%;
        }
        .countdown-text {
          font-size: 10px;
          fill: #495057;
        }
        .cancel-delete {
          color: #0077e1;
          font-size: 1rem;
          text-decoration: none;
        }
      </style>
      <div class="delete-container">
        <div class="delete-trigger">
          <slot name="trigger">
            <i class="fa-solid fa-trash-alt"></i>
          </slot>
        </div>
        <div class="confirm-delete">
          <svg class="countdown-circle" viewBox="0 0 40 40">
            <circle class="countdown-bg" cx="20" cy="20" r="15"></circle>
            <circle class="countdown-progress" cx="20" cy="20" r="15"></circle>
            <text class="countdown-text" x="20" y="22" text-anchor="middle">${this.countdown}</text>
          </svg>
          <a href="#" class="cancel-delete">Отменить</a>
        </div>
      </div>
    `;
  }

  startCountdown() {
    const trigger = this.shadowRoot.querySelector('.delete-trigger');
    const confirm = this.shadowRoot.querySelector('.confirm-delete');
    const countdownText = this.shadowRoot.querySelector('.countdown-text');
    const countdownCircle = this.shadowRoot.querySelector('.countdown-progress');

    trigger.style.display = 'none';
    confirm.style.display = 'flex';
    countdownCircle.style.strokeDasharray = this.circumference;
    countdownCircle.style.strokeDashoffset = 0;

    let elapsed = 0;
    const interval = setInterval(() => {
      elapsed += 0.01;
      this.countdown -= 0.01;
      countdownText.textContent = Math.round(this.countdown);
      countdownCircle.style.strokeDashoffset = 
        (elapsed / DeleteConfirm.DEFAULT_COUNTDOWN) * this.circumference;

      if (this.countdown <= 0) {
        clearInterval(interval);
        this.dispatchEvent(new CustomEvent('delete-confirmed'));
      }
    }, 10);

    this.interval = interval;
  }

  cancelDelete(e) {
    e.preventDefault();
    clearInterval(this.interval);
    this.reset();
  }

  reset() {
    this.countdown = DeleteConfirm.DEFAULT_COUNTDOWN;
    this.shadowRoot.querySelector('.delete-trigger').style.display = 'block';
    this.shadowRoot.querySelector('.confirm-delete').style.display = 'none';
    this.shadowRoot.querySelector('.countdown-progress').style.strokeDashoffset = 1;
    this.shadowRoot.querySelector('.countdown-text').textContent = this.countdown;
  }
}

customElements.define('delete-confirm', DeleteConfirm);

// basket-item.js - основной класс элемента корзины
class BasketItem {
  static DEFAULT_SETTINGS = {
    DEFAULT_IMAGE: 'default-image.png',
    DEFAULT_PRODUCT_NAME: 'Product Name'
  };

  constructor(containerClass, item) {
    this.item = item;
    this.container = document.querySelector(`.${containerClass}`);
    if (!this.container) {
      throw new Error('Container not found');
    }

    this.render();
    this.setupDeleteHandler();
  }

  render() {
    this.basketItemElement = document.createElement("div");
    this.basketItemElement.className = "basket-item";

    const basketItemBody = document.createElement("div");
    basketItemBody.className = "card-body";
    basketItemBody.innerHTML = this.getItemHTML();

    this.basketItemElement.appendChild(basketItemBody);
    this.container.appendChild(this.basketItemElement);
  }

  getItemHTML() {
    const { productId, productName, quantity = 0, price = 0, mediaFiles = [] } = this.item;
    const imageSrc = mediaFiles[0]?.mediaKey || BasketItem.DEFAULT_SETTINGS.DEFAULT_IMAGE;
    const totalPrice = quantity * price;

    return `
      <div class="row">        
        <div class="col-5 col-xs-6 col-sm-3 col-md-3">
          <img class="image" src="${imageSrc}" alt="${productName}">
        </div>        
        <div class="col-7 col-xs-6 col-sm-9 col-md-9">        
          <div class="row">
            <div class="col-12 col-xs-12 col-sm-12 col-md-12">
              <div class="basket-card-title">${productName || BasketItem.DEFAULT_SETTINGS.DEFAULT_PRODUCT_NAME}</div>
            </div>
            <div class="col-12 col-xs-12 col-sm-6 col-md-4">
              <basket-button 
                class="button-add-to-basket" 
                product-id="${productId}"
                basket-skin="white" 
                basket-count="${quantity}">
              </basket-button>
            </div>
            <div class="col-12 col-xs-12 col-sm-6 col-md-4">
              <div class="basket-card-price" for="${productId}">
                ${totalPrice} ₽
              </div>
            </div>
            <div class="col-10 col-xs-6 col-sm-10 col-md-4">
              <delete-confirm>
                <i slot="trigger" class="fa-solid fa-trash-alt basket-card-trash-hotkey"></i>
              </delete-confirm>
            </div>
          </div>
        </div>                                             
      </div>`;
  }

  setupDeleteHandler() {
    const deleteConfirm = this.basketItemElement.querySelector('delete-confirm');
    deleteConfirm.addEventListener('delete-confirmed', this.declineItem.bind(this));
  }

  async declineItem() {
    try {
      this.api = new WebAPI();
      const response = await fetch(this.api.removeItemBasketMethod() + `/${this.item.productId}`, {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' }
      });

      if (!response.ok) throw new Error('Failed to remove item');

      this.basketItemElement.remove();
      if (toastr) {
        toastr.success('Товар удален из корзины', 'Товары', { 
          timeOut: 3000 
        });
      }

      if (eventBus) {
        eventBus.emit(EVENT_BASKET_ITEM_UPDATE, { 
          productId: this.item.productId, 
          quantity: 1 
        });
      }
    } catch (error) {
      console.error('Ошибка при удалении товара:', error);
      if (toastr) {
        toastr.error('Ошибка при удалении из корзины', 'Товары', { 
          timeOut: 3000 
        });
      }
      this.basketItemElement.querySelector('delete-confirm').reset();
    }
  }
}
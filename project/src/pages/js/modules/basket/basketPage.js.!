class BasketSection extends PageBuilder {
    constructor(containerId) {
        super(containerId);
        this.api = new WebAPI();
        this.common = new CommonFunctions();
        this.deliveryType = null;
        this.address = null;
    }

    /**
     * Generates the Basket section module.
     */
    BasketCardContainer(totalQuantity = 0, totalAmount = 0, data) {
        let o = this;
        const BasketContainer = document.createElement("div");
        BasketContainer.className = "card-container";

//	Сами товары 
	this.BasketBodyContainer(BasketContainer, totalQuantity, totalAmount);

        if (totalQuantity === 0) {
	  this.BasketTotalAmount(BasketContainer);
        } else {
   	    this.BasketContainerItog(BasketContainer, totalQuantity, totalAmount);
            this.DeliveryContainer(BasketContainer); // Тип доставки
            this.AddressContainer(BasketContainer); //  Адрес
            this.SendOrderButtonContainer(BasketContainer); // Кнопка отправить заказ

  	    eventBus.on("basketItemUpdated", (_message) => { // Подписчик: реагирует на событие
		o.basketUpdate(_message);
	   });	    
        }
        this.addModule("Basket", BasketContainer);
    }


/* Обновление данных корзины */
 basketUpdate(message) {
  let o = this;
  let webRequest = new WebRequest();
  let request = webRequest.get(o.api.getShopBasketMethod(),  {}, false )
     .then(function(data) {
           console.log(data)
	   if(data.basket.length == 0) 
	   window.location.href = window.location.pathname;
           o.totalQuantity = data?.basket?.reduce((quantity, item) => quantity + item.quantity, 0);
           o.totalAmount = data?.totalAmount;
      // Динамически обновляем значения в DOM
           let quantityElement = document.querySelector(".basket-itog-quantity-sum");
           let amountElement = document.querySelector(".basket-itog-sum");
           if (quantityElement) quantityElement.textContent = o.totalQuantity;
           if (amountElement) amountElement.textContent = `${o.totalAmount} ₽`;

   	// Находим все элементы с классом .basket-card-price
   	    const priceElements = document.querySelectorAll('.basket-card-price');

 	 // Перебираем найденные элементы и выводим их содержимое
	     priceElements.forEach((priceElement, index) => {
               priceElement.textContent = ``;
	    });

	  // обновляем записи

   	     data.basket.forEach(item => {
              o.updateBasketPrice(item.productId, `${item.quantity*item.price} ₽`); 
            });


        })                                
     .catch(function(error) {
       console.log('showBasketOutput.Произошла ошибка =>', error);
     });
    return this;
 }

/**
 * Обновляет значение цены в компоненте basket-button
 * @param {string} productId - Идентификатор продукта (значение атрибута product-id).
 * @param {string} amount - Новая сумма для отображения (например, "950 ₽").
 */
  updateBasketPrice(productId, amount) {
    // Находим элемент с классом basket-card-price внутри компонента
     const priceElement = document.querySelector(`.basket-card-price[for="${productId}"]`);
     if (priceElement) {
    // Обновляем значение внутри элемента
       priceElement.textContent = amount;
     } else {
       console.error('Элемент .basket-card-price не найден внутри компонента basket-button');
    }    
 }

  BasketBodyContainer(container, totalQuantity, totalAmount){
        const BasketContainerHeader = document.createElement("div");
        BasketContainerHeader.className = "card-header";
        BasketContainerHeader.innerHTML = `<h3 class="card-title">
	  ${
		(totalQuantity !== 0)
		  ? "Ваша корзина" 
		  : "В корзине пока пусто"                  
		}
	</h3>`;

        const BasketContainerContent = document.createElement("div");
        BasketContainerContent.className = "card-body";
        BasketContainerContent.innerHTML = `<div class="basket-body-container"></div>`;

        container.appendChild(BasketContainerHeader);
        container.appendChild(BasketContainerContent);
  }

  BasketTotalAmount(container){
        const BasketTotalAmountContainer = document.createElement("div");
         BasketTotalAmountContainer.innerHTML = `
		<div class="basket-empty-text text-center" style="padding: 1rem 0; font-size: 0.9rem;"> Зайдите в каталог, чтобы выбрать товары или найти нужное в поискe</div> 
		<div class="basket-button-container"> <a href="/products/page" class="btn btn-lg btn-success w-100 create-order-btn">Перейти в каталог</a></div> `;
         container.appendChild(BasketTotalAmountContainer);
  }

  BasketContainerItog(container, totalQuantity, totalAmount){
            const BasketContainerItog = document.createElement("div");
            BasketContainerItog.className = "card-itog-body-container";
            BasketContainerItog.innerHTML = `
            <div class="row">
                <div class="col-6 text-left">
                    <div class="basket-itog-quantity-title">Всего товаров</div>
                </div>
                <div class="col-6 text-right">
                    <div class="basket-itog-quantity-sum">${totalQuantity}</div>
                </div>
            </div>
            <div class="row">
                <div class="col-6 text-left">
                    <div class="basket-itog-title">Итого</div>
                </div>
                <div class="col-6 text-right">
                    <div class="basket-itog-sum">${totalAmount} ₽</div>
                </div>
            </div>
`;


            const BasketContainerCreateOrderButton = document.createElement("div");
            BasketContainerCreateOrderButton.className = "card-created-order-button-container";

            // Создаем кнопку
            const createOrderButton = document.createElement("button");
            createOrderButton.className = "btn btn-lg btn-success w-100 create-order-btn";
            createOrderButton.textContent = "Перейти к оформлению заказа";

            BasketContainerCreateOrderButton.appendChild(createOrderButton);

            const BasketContainerOrderZigZag = document.createElement("div");
            BasketContainerOrderZigZag.className = "zig-zag";


 

            container.appendChild(BasketContainerItog);          
            container.appendChild(BasketContainerCreateOrderButton);
            container.appendChild(BasketContainerOrderZigZag);
	    this.attachDeliveryOrderButtonHandler(createOrderButton);

  }

  SendOrderButtonContainer(container){
            const sendOrderButton = document.createElement("button");
            sendOrderButton.className = "btn btn-lg btn-success w-100 send-order-btn d-none";
            sendOrderButton.textContent = "Отправить заказ";
            container.appendChild(sendOrderButton);          
  }

  DeliveryTypeContainer(containerClass, extClass = '', text = '', onClick = null) {
        const _aContainerContent = document.createElement("div");
        _aContainerContent.className = `w-50 ${containerClass}`;
        const aContainerContent = document.createElement("div");
        aContainerContent.className = "delivery-type-btn btn btn-block btn-light btn-lg w-100 m-1";

	const deliverySelfTypeContainerContent = document.createElement("i");
	deliverySelfTypeContainerContent.className = extClass;

	const deliverySelfTextContainerContent = document.createElement("span");
	deliverySelfTextContainerContent.style.fontFamily = "Roboto Condensed";
	deliverySelfTextContainerContent.style.fontSize = "0.8rem";
	deliverySelfTextContainerContent.style.fontWeight = "400";
	deliverySelfTextContainerContent.style.paddingLeft = "0.5rem";
	deliverySelfTextContainerContent.innerText = text;

	aContainerContent.appendChild(deliverySelfTypeContainerContent);
	aContainerContent.appendChild(deliverySelfTextContainerContent);
	_aContainerContent.appendChild(aContainerContent);

	if(onClick)
	    _aContainerContent.addEventListener("click", ()=>onClick(_aContainerContent));
	return _aContainerContent;
  }

  DeliveryContainer(container) {
        const deliveryContainer = document.createElement("div");
        deliveryContainer.className = "delivery-container d-none";

        const deliveryContainerHeader = document.createElement("div");
        deliveryContainerHeader.className = "card-header";
        deliveryContainerHeader.innerHTML = `<h3 class="card-title">Выберите тип доставки</h3>`;

        const deliveryContainerContent = document.createElement("div");
        deliveryContainerContent.className = "card-body";

        const deliveryBodyContainerContent = document.createElement("div");
        deliveryBodyContainerContent.className = "deliveryBodyContainerContent";
        deliveryContainerContent.appendChild(deliveryBodyContainerContent);

        deliveryContainer.appendChild(deliveryContainerHeader);
        deliveryContainer.appendChild(deliveryContainerContent);

        const deliveryHotKeyContainer = document.createElement("div");
        deliveryHotKeyContainer.className = "row pb-4";                                     

	deliveryHotKeyContainer.appendChild(this.DeliveryTypeContainer("SELF_DELIVERY", "self-delivery-logo fa-solid", "САМОВЫВОЗ", this.DeliveryTypeContainerOnClick.bind(this)));
	deliveryHotKeyContainer.appendChild(this.DeliveryTypeContainer("COURIER_SERVICE", "courier-logo fa-solid", "ДОСТАВКА КУРЬЕРОМ",this.DeliveryTypeContainerOnClick.bind(this)));
	deliveryHotKeyContainer.appendChild(this.DeliveryTypeContainer("RUSSIAN_POST", "russian-post-logo fa-solid ", "",this.DeliveryTypeContainerOnClick.bind(this)));
	deliveryHotKeyContainer.appendChild(this.DeliveryTypeContainer("CDEK", "cdek-logo fa-solid ", "",this.DeliveryTypeContainerOnClick.bind(this)));
	deliveryHotKeyContainer.appendChild(this.DeliveryTypeContainer("PARCEL_LOCKER", "parcel_locker fa-solid", "ЧЕРЕЗ ПОСТАМАТ",this.DeliveryTypeContainerOnClick.bind(this)));

        deliveryContainer.appendChild(deliveryHotKeyContainer);
        container.appendChild(deliveryContainer);
   }

  DeliveryTypeContainerOnClick(container){
   console.log(container);	
   if(container.classList.contains('SELF_DELIVERY')) this.deliveryType = "SELF_DELIVERY";
   if(container.classList.contains('COURIER_SERVICE')) this.deliveryType = "COURIER_SERVICE";
   if(container.classList.contains('POST_SERVICE')) this.deliveryType = "POST_SERVICE";
   if(container.classList.contains('PARCEL_LOCKER')) this.deliveryType = "PARCEL_LOCKER";

    const addressBox = document.querySelector(".address-container");
    const sendOrderButton = document.querySelector(".send-order-btn");

   switch(this.deliveryType) {
	case "SELF_DELIVERY"   : {
		addressBox.classList.add('d-none');
		sendOrderButton.classList.remove('d-none');
		break;
	}
	case "COURIER_SERVICE" : {
  	       if (addressBox) 
		addressBox.classList.remove('d-none');
		sendOrderButton.classList.remove('d-none');
		break;
	}
	case "POST_SERVICE"    : {
  	       if (addressBox) 
		addressBox.classList.remove('d-none');
		sendOrderButton.classList.remove('d-none');
		break;
	}
	case "PARCEL_LOCKER"   : {
		addressBox.classList.add('d-none');
		break;
	}
    }	
 }

 AddressContainer(container) {
        const addressContainer = document.createElement("div");
        addressContainer.className = "address-container d-none";

        const addressContainerHeader = document.createElement("div");
        addressContainerHeader.className = "card-header";
        addressContainerHeader.innerHTML = `<h3 class="card-title">Адреса доставки</h3>`;

        const addressContainerContent = document.createElement("div");
        addressContainerContent.className = "card-body";
        addressContainerContent.innerHTML = `<div class="address-body-container"></div>`;

        addressContainer.appendChild(addressContainerHeader);
        addressContainer.appendChild(addressContainerContent);
        let address =  new AddressManager(this);
	addressContainer.appendChild(address.createAddressesSection());
	container.appendChild(addressContainer);

// подключить обработчик
	const autocomplete = container.querySelector('#address');
		 autocomplete
		        .setUrl('/api/bff/client/v1/suggest/address?query=') // Установите URL для поиска
			.setPlaceholder('Введите данные для доставки - город, улицу, дом, квартиру...')
		        .onRequest(() => {
			   console.log('Запрос к API отправлен');
		        })
		        .onLoad((response) => {
		            console.log('Данные загружены', response);
		            if(!response.data) { 
				autocomplete.hideItemsBlock() 
			     } else {
		              (response?.data?.length == 0)
			        ? autocomplete.hideItemsBlock()
		                : response.data.forEach(item => {
		                   autocomplete.dropDownListItemDraw(item, item.fiasId, item.value);
		           });
			  }	
		        })
	        .onSelect((item) => {
              console.log('Выбран элемент', item);
            });



    }


/**
* Attaches a click handler to the "Create Order" button.
*/
  attachCreateOrderButtonHandler(button) {
    const o = this;

    button.addEventListener("click", function () {
     // Блокируем кнопку
     button.disabled = true;
     button.textContent = "Создание...";

     const webRequest = new WebRequest();
     o.referenceId = o.common.uuid();

     webRequest
       .post(o.api.createOrderMethod(), { referenceId: o.referenceId }, false)
       .then((data) => {
        console.log("Заказ успешно создан:", data);
        const order = new OrderDto(data.order);
        if (!order) throw new Error("Object order is null");
          order.saveToLocalStorage(o.referenceId);
              window.location.href = `/orders/delivery/${o.referenceId}`;
                })
                .catch((error) => {
                    console.error("Ошибка при создании заказа:", error);

                    if (error.status === 409) {
                        window.location.href = "/orders/payment/availability-error";
                    } else {
                        window.location.href = "/orders/create-error";
                    }
                })
                .finally(() => {
                    // Разблокируем кнопку независимо от результата
                    button.disabled = false;
                    button.textContent = "Создать заказ";
                });
        });
    }

    attachDeliveryOrderButtonHandler(button){
      button.addEventListener("click", function () {
        // Блокируем кнопку
        button.classList.add('d-none');
        button.textContent = "Создание...";
        const deliveryBox = document.querySelector(".delivery-container");
	 if (deliveryBox) 
        	deliveryBox.classList.remove('d-none');
      });
    }    

    attachAddressOrderButtonHandler(button){
      button.addEventListener("click", function () {
        // Блокируем кнопку
        button.disabled = true;
        button.textContent = "Создание...";

        let o = this;
        const addressContainer = document.createElement("div");
        addressContainer.className = "card card-container";

        const addressContainerHeader = document.createElement("div");
        addressContainerHeader.className = "card-header";
        addressContainerHeader.innerHTML = `<h3 class="card-title">Адреса доставки</h3>`;

        const addressContainerContent = document.createElement("div");
        addressContainerContent.className = "card-body";
        addressContainerContent.innerHTML = `<div class="address-body-container"></div>`;

        addressContainer.appendChild(addressContainerHeader);
        addressContainer.appendChild(addressContainerContent);

        button.disabled = false;
        button.textContent = "Отправить заказ";
      });
    }    


}

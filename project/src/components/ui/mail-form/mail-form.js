class MailForm extends HTMLElement {
  constructor() {
    super();
    this.attachShadow({ mode: 'open' });
    this.api = new WebAPI();
    this.uploadedFiles = [];
  }

  connectedCallback() {
    this.rating = this.getAttribute("rating") || 0;
    this.productId = this.getAttribute("product-id") || null;
    this.uploadProcessName = this.api._USER_PRODUCT_MAIL_FILE_UPLOAD_EVENT_;
    this.render();
    this.setupEventListeners();
  }

  render() {
    this.shadowRoot.innerHTML = `
      <link rel="stylesheet" href="/src/pages/plugins/fontawesome-free/css/all.min.css">
      <link rel="stylesheet" href="/src/components/ui/mail-form/css/mail-form.css">
      <link rel="stylesheet" href="/src/pages/css/bootstrap.min.css">
      <bottom-drawer drawer-id="product-reply-message-dialog" action-id="product-reply-message-send" action-text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ">
      <div class="mail-form">
        <h3 class="mail-form__title">–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</h3>
        <textarea class="mail-form__textarea" rows="4" placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤..."></textarea>
        <div class="mail-form__emoji-panel">
          <ul class="mail-form__buttons">
            <li><button class="emoji mail-form__add-emoji-button">üòä</button></li>
            <li><button class="emoji mail-form__add-emoji-button">üòç</button></li>
            <li><button class="emoji mail-form__add-emoji-button">üòÇ</button></li>
            <li><button class="emoji mail-form__add-emoji-button">ü§î</button></li>
            <li><button class="emoji mail-form__add-emoji-button">üò¢</button></li>
            <li><button class="emoji mail-form__add-emoji-button">üëç</button></li>
            <li><button class="emoji mail-form__add-emoji-button">üëé</button></li>
          </ul>
        </div>
        <h3 class="mail-form__title">–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</h3>
        <div class="mail-form__photos">
          <file-upload file-upload-id="${this.productId}" process-name="${this.api._USER_PRODUCT_MAIL_FILE_UPLOAD_EVENT_}"  allowed-types="image/png,image/jpeg,image/jpg" max-size="10"></file-upload>
        </div>
        <div class="mail-form__thumbnails"></div>
        </div>
      </bottom-drawer>
    `;

  }

    openDrawer(drawerId, detail) {
      this.drawer = this.shadowRoot.querySelector(`bottom-drawer[drawer-id="${drawerId}"]`);
      this.drawer?.setAttribute("reply-id", detail.replyId);
      this.setButtonDisabled(this.drawer || null);

      if (this.drawer) this.drawer.open();
   }

  setButtonDisabled(drawer = null){
      const submitButton = drawer?.shadowRoot.querySelector(".bottom-drawer__button--action");	
      const textarea = this.shadowRoot.querySelector('.mail-form__textarea');
      console.log(submitButton);
      if (submitButton && textarea) {
  	  submitButton.disabled = textarea.value.length > 0 ? false : true;
      }
  }

  setupEventListeners() {
    const textarea = this.shadowRoot.querySelector('.mail-form__textarea');
    const emojiPanel = this.shadowRoot.querySelector('.mail-form__emoji-panel');
    const photoInput = this.shadowRoot.querySelector(`file-upload[file-upload-id="${this.productId}"]`);
    const thumbnails = this.shadowRoot.querySelector('.mail-form__thumbnails');

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã textarea
    textarea.addEventListener('input', () => {
      textarea.style.height = 'auto';
      textarea.style.height = `${textarea.scrollHeight}px`;
    });

    // –í—Å—Ç–∞–≤–∫–∞ —ç–º–æ–¥–∑–∏
    emojiPanel.addEventListener('click', (e) => {
      if (e.target.classList.contains('mail-form__add-emoji-button')) {
        textarea.value += e.target.textContent;
        textarea.focus();
      }
    });

    textarea.addEventListener('keyup', (e) => {
        this.setButtonDisabled(this.drawer || null);
    });


    /** –û—Ç–∫—Ä—ã–≤–∞–µ—Ç drawer  */
    let o = this;
    document.addEventListener('product-reply-message-dialog-open', (event) => {
        const title = this.shadowRoot.querySelector('.mail-form__title');    
        title.innerHTML = `–û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É ${event.detail.mail.author}`;
        o.openDrawer('product-reply-message-dialog', event.detail);
    });


   document.addEventListener('product-reply-message-send', (event) => {
        this.sendMessage();
  });

   // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    console.log(this.uploadProcessName);
    if(this.uploadProcessName) //–µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–±—ã—Ç–∏—è
     photoInput.addEventListener(this.uploadProcessName+`-success`, (e) => {
	    console.log(this.uploadProcessName+`-success`, e);
	    try {
        	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ response –∏ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω —Å—Ç—Ä–æ–∫–æ–π
	        let fileId = e?.detail?.file?.fileId || null;
	        let response = e?.detail?.response ? JSON.parse(e?.detail?.response) : null;
	        let url = response?.files?.length > 0 ? response?.files[0]  : null;
	        if (fileId ) {
	            this.uploadedFiles.push({fileId : fileId, url : url}); 
	            console.log('–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', fileId);
	        } else {
	            console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ response:', e?.response);
	        }
	    } catch (error) {
	        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON –∏–∑ response:', error);
	    }
	});
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  async sendMessage() {
    const textarea = this.shadowRoot.querySelector('.mail-form__textarea');
    const thumbnails = this.shadowRoot.querySelector('.mail-form__thumbnails');

    const messageData = {
     message: textarea.value,
     files: this.uploadedFiles, // –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Å—Å–∏–≤ —Ñ–∞–π–ª–æ–≤
   };

   try {
    const response = await fetch(
      this.api.sendProductMailMethod(this.productId),
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(messageData),
      }
    );

    if (response.ok) {
      toastr.success('–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!', '–û—Ç–∑—ã–≤', 3000);
      window.location.href = window.location.pathname; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      textarea.value = '';
      this.uploadedFiles = [];
      thumbnails.innerHTML = '';
     } else {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∑—ã–≤–∞');
     }
   } catch (error) {
    toastr.error('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', '–£–ø—Å...', 3000);
    console.error(error);
   }
 }
}

customElements.define('mail-form', MailForm);

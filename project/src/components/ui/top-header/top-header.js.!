class TopHeader extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
       // –°–æ–∑–¥–∞–µ–º callback-—ã
        this.onSearchButtonClick = null;
        this.onEnterPress = null;
    }

   static get observedAttributes() {
        return ['search-placeholder'];
    }

    attributeChangedCallback(name, oldValue, newValue) {
      console.log(name, oldValue, newValue);
        if (name === 'search-placeholder' && this.searchInput) {
            this.searchInput.setAttribute('placeholder', newValue);
        }
    }

    connectedCallback() {
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML –º–µ–Ω—é
       const linkElem = document.createElement('link');
       linkElem.setAttribute('rel', 'stylesheet');
       linkElem.setAttribute('href', '/src/components/ui/top-header/css/top-header.css');
       this.shadowRoot.appendChild(linkElem);

       const linkElem2 = document.createElement('link');
       linkElem2.setAttribute('rel', 'stylesheet');
       linkElem2.setAttribute('href', '/src/pages/plugins/fontawesome-free/css/all.min.css');
       this.shadowRoot.appendChild(linkElem2);

       const linkElem3 = document.createElement('link');
       linkElem3.setAttribute('rel', 'stylesheet');
       linkElem3.setAttribute('href', '/src/pages/css/bootstrap.min.css');
       this.shadowRoot.appendChild(linkElem3);

       this.shadowRoot.innerHTML += `
            <header class="header">
                <div class="header__container">
                    <div class="header__top">
			<a href="/" class="header__logo">
                     
                        </a>
                    </div>
                    <div class="header__bottom">
                        <div class="header__search">
                            <input type="search" class="search-input" placeholder=""${this.getAttribute('search-placeholder') || '–ü–æ–∏—Å–∫'}">
                            <button  class="btn btn-block btn-outline-dark search-button"><i class="fas fa-search"></i></button>
                            <button  class="btn btn-block btn-outline-dark filter-button"><i class="fas fa-filter"></i></button>
                        </div>
                    </div>
                </div>
            </header>
        `;  // üîç
     // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏ –∫–ª–∞–≤–∏—à–∏ Enter
        this.searchInput = this.shadowRoot.querySelector('.search-input');
        this.searchButton = this.shadowRoot.querySelector('.search-button');
        this.filterButton = this.shadowRoot.querySelector('.filter-button');

        if( this.searchInput) {
        this.searchInput.addEventListener('keydown', (event) => {
            console.log(event.key);
            if (event.key === 'Enter' && typeof this.onEnterPress === 'function') {
                this.onEnterPress(this.searchInput.value);
            }
          });
        }

        if(this.searchButton) {
        this.searchButton.addEventListener('click', () => {
            console.log(event.key);
            if (typeof this.onSearchButtonClick === 'function') {
                this.onSearchButtonClick(this.searchInput.value);
            }
        });
      }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ placeholder —á–µ—Ä–µ–∑ —Å–≤–æ–π—Å—Ç–≤–æ
    set searchPlaceholder(value) {
        this.setAttribute('search-placeholder', value);
    }

    get searchPlaceholder() {
        return this.getAttribute('search-placeholder');
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ callback-–æ–≤
    setSearchButtonCallback(callback) {
        this.onSearchButtonClick = callback;
    }

    setEnterPressCallback(callback) {
        this.onEnterPress = callback;
    }





}


document.addEventListener('DOMContentLoaded', () => {
    const header = document.querySelector('top-header').shadowRoot.querySelector('.header');
    let lastScroll = 0;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    window.addEventListener('scroll', () => {
        const currentScroll = window.pageYOffset || document.documentElement.scrollTop;

        if (currentScroll > lastScroll && currentScroll > header.offsetHeight) {
            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ - —Å–∫—Ä—ã—Ç—å –º–µ–Ω—é
            header.style.top = `-${header.offsetHeight}px`;
        } else {
            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
            header.style.top = '0';
        }

        lastScroll = currentScroll <= 0 ? 0 : currentScroll; // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é

    const topHeader = document.querySelector('top-header').shadowRoot.querySelector('.header');
/*
    burger.addEventListener('click', () => {
        topHeader.classList.toggle('header--mobile-menu-open');
    });
*/
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    let touchStartY = 0;
    let touchEndY = 0;

    const handleGesture = () => {
        if (touchEndY < touchStartY - 50) {
            // –°–≤–∞–π–ø –≤–≤–µ—Ä—Ö - —Å–∫—Ä—ã—Ç—å –º–µ–Ω—é
            header.style.top = `-${header.offsetHeight}px`;
        }

        if (touchEndY > touchStartY + 50) {
            // –°–≤–∞–π–ø –≤–Ω–∏–∑ - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
            header.style.top = '0';
        }
    };

    window.addEventListener('touchstart', (e) => {
        touchStartY = e.changedTouches[0].screenY;
    }, false);

    window.addEventListener('touchend', (e) => {
        touchEndY = e.changedTouches[0].screenY;
        handleGesture();
    }, false);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞
    const navLinks = document.querySelector('top-header').shadowRoot.querySelectorAll('.header__nav-item a');
    navLinks.forEach(link => {
        link.addEventListener('click', () => {
            topHeader.classList.remove('header--mobile-menu-open');
        });
    });
});

console.log('initialize top-header... ');
customElements.define('top-header', TopHeader);


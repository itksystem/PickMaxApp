class TopHeader extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
    }

    connectedCallback() {
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML –º–µ–Ω—é
       const linkElem = document.createElement('link');
       linkElem.setAttribute('rel', 'stylesheet');
       linkElem.setAttribute('href', '/main/css/top-header.css');
       this.shadowRoot.appendChild(linkElem);
       this.shadowRoot.innerHTML += `
            <header class="header">
                <div class="header__container">
                    <div class="header__top">
			<a href="/" class="header__logo">
                            <img src="https://static-basket-01.wbbasket.ru/vol0/i/v3/header/logoWb.svg" alt="Wildberries">
                        </a>
                    </div>
                    <div class="header__bottom">
                        <div class="header__search">
                            <input type="search" placeholder="–ù–∞–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω–µ">
`+
//                            <button type="button">üîç</button>
`                        </div>
                    </div>
                </div>
            </header>
        `;
    }
}


document.addEventListener('DOMContentLoaded', () => {
    const header = document.querySelector('top-header').shadowRoot.querySelector('.header');
    let lastScroll = 0;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è/–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ
    window.addEventListener('scroll', () => {
        const currentScroll = window.pageYOffset || document.documentElement.scrollTop;

        if (currentScroll > lastScroll && currentScroll > header.offsetHeight) {
            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑ - —Å–∫—Ä—ã—Ç—å –º–µ–Ω—é
            header.style.top = `-${header.offsetHeight}px`;
        } else {
            // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–≤–µ—Ä—Ö - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
            header.style.top = '0';
        }

        lastScroll = currentScroll <= 0 ? 0 : currentScroll; // –î–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é

    const topHeader = document.querySelector('top-header').shadowRoot.querySelector('.header');
/*
    burger.addEventListener('click', () => {
        topHeader.classList.toggle('header--mobile-menu-open');
    });
*/
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–∞–π–ø–æ–≤ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    let touchStartY = 0;
    let touchEndY = 0;

    const handleGesture = () => {
        if (touchEndY < touchStartY - 50) {
            // –°–≤–∞–π–ø –≤–≤–µ—Ä—Ö - —Å–∫—Ä—ã—Ç—å –º–µ–Ω—é
            header.style.top = `-${header.offsetHeight}px`;
        }

        if (touchEndY > touchStartY + 50) {
            // –°–≤–∞–π–ø –≤–Ω–∏–∑ - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
            header.style.top = '0';
        }
    };

    window.addEventListener('touchstart', (e) => {
        touchStartY = e.changedTouches[0].screenY;
    }, false);

    window.addEventListener('touchend', (e) => {
        touchEndY = e.changedTouches[0].screenY;
        handleGesture();
    }, false);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—É–Ω–∫—Ç–∞
    const navLinks = document.querySelector('top-header').shadowRoot.querySelectorAll('.header__nav-item a');
    navLinks.forEach(link => {
        link.addEventListener('click', () => {
            topHeader.classList.remove('header--mobile-menu-open');
        });
    });
});


customElements.define('top-header', TopHeader);


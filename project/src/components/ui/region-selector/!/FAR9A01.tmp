<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Городской селектор с кнопкой</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            padding: 20px;
        }
        .demo-container {
            max-width: 500px;
            margin: 0 auto;
        }
        .chips-container {
            display: flex;
            flex-wrap: wrap;
            margin-top: 10px;
            gap: 5px;
        }
    </style>
    <script>
class ChipButton extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
        this.render();
    }

    static get observedAttributes() {
        return ['label', 'value']; // Отслеживаем изменения этих атрибутов
    }

    connectedCallback() {
        this.shadowRoot.querySelector('.close-btn')
            .addEventListener('click', () => {
                this.dispatchEvent(new CustomEvent('chip-removed', {
                    detail: { value: this.getAttribute('value') },
                    bubbles: true,
                    composed: true
                }));
                this.remove();
            });
    }

    attributeChangedCallback(name, oldValue, newValue) {
        if (name === 'label' && this.shadowRoot) {
            // Обновляем текст label при изменении атрибута
            const labelElement = this.shadowRoot.querySelector('.label');
            if (labelElement) {
                labelElement.textContent = newValue || 'Chip';
            }
        }
    }

    render() {
        this.shadowRoot.innerHTML = `
            <style>
                :host {
                    display: inline-flex;
                    align-items: center;
                    padding: 0.3rem 0.8rem;
                    border-radius: 1rem;
                    font-size: 0.8rem;
                    cursor: pointer;
                    margin: 0.3rem;
                    background-color: #3498db;
                    color: white;
                }
                .close-btn {
                    background: none;
                    border: none;
                    font-size: 1rem;
                    cursor: pointer;
                    color: white;
                    margin-left: 5px;
                }
            </style>
            <span class="label">${this.getAttribute('label') || 'Chip'}</span>
            <button class="close-btn" value="${this.getAttribute('value')}">&times;</button>
        `;
    }
}
customElements.define('chip-button', ChipButton);


        class RussiaRegionSelector extends HTMLElement {
            constructor() {
                super();
                this.token = "bc9d9254dea2089592ccee5328f19ce9d004a43c";
                this.timeoutId = null;
                this.selectedSuggestion = null;
                this.onSelectCallback = null;
                this.selectedRegions = [];
                this.attachShadow({ mode: 'open' });
            }

            connectedCallback() {
                this.render();
                this.initEventListeners();
            }

            setOnSelectCallback(callback) {
                if (typeof callback === 'function') {
                    this.onSelectCallback = callback;
                }
            }

            render() {
                this.shadowRoot.innerHTML = `
                    <div class="town-select">
                        <div class="input-container">
                            <input type="text" placeholder="Укажите регионы" id="region-input">
                            <button id="select-button" disabled>Выбрать</button>
                        </div>
                        <div class="suggestions-container" id="suggestions-container"></div>
                        <div class="chips-container" id="chips-container"></div>
                    </div>
                    ${this.getStyles()}
                `;
            }

            getStyles() {
                return `
                    <style>
                        .town-select {
                            position: relative;
                            width: 100%;
                            font-family: Arial, sans-serif;
                        }
                        
                        .input-container {
                            display: flex;
                            gap: 10px;
                        }
                        
                        .town-select input {
                            flex: 1;
                            padding: 10px;
                            border: 1px solid #ddd;
                            border-radius: 4px;
                            box-sizing: border-box;
                            font-size: 16px;
                        }
                        
                        .town-select button {
                            padding: 10px 15px;
                            background-color: #4CAF50;
                            color: white;
                            border: none;
                            border-radius: 4px;
                            cursor: pointer;
                            font-size: 16px;
                            transition: background-color 0.3s;
                        }
                        
                        .town-select button:disabled {
                            background-color: #cccccc;
                            cursor: not-allowed;
                        }
                        
                        .town-select button:not(:disabled):hover {
                            background-color: #45a049;
                        }
                        
                        .suggestions-container {
                            position: absolute;
                            top: 100%;
                            left: 0;
                            right: 0;
                            background: white;
                            border: 1px solid #ddd;
                            border-top: none;
                            border-radius: 0 0 4px 4px;
                            max-height: 300px;
                            overflow-y: auto;
                            z-index: 1000;
                            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                            display: none;
                        }
                        
                        .suggestion-item {
                            padding: 10px;
                            cursor: pointer;
                            border-bottom: 1px solid #eee;
                        }
                        
                        .suggestion-item:last-child {
                            border-bottom: none;
                        }
                        
                        .suggestion-item:hover, .suggestion-item.highlighted {
                            background-color: #f5f5f5;
                        }
                        
                        .loading {
                            padding: 10px;
                            color: #666;
                            text-align: center;
                            font-style: italic;
                        }
                        
                        .chips-container {
                            display: flex;
                            flex-wrap: wrap;
                            margin-top: 10px;
                            gap: 5px;
                        }
                    </style>
                `;
            }

            initEventListeners() {
                const input = this.shadowRoot.getElementById('region-input');
                const button = this.shadowRoot.getElementById('select-button');
                const container = this.shadowRoot.getElementById('suggestions-container');

                input.addEventListener('input', this.handleInput.bind(this));
                input.addEventListener('focus', this.showSuggestionsIfData.bind(this));
                input.addEventListener('keydown', this.handleKeyDown.bind(this));
                button.addEventListener('click', this.handleButtonClick.bind(this));

                this.shadowRoot.addEventListener('chip-removed', this.handleChipRemoved.bind(this));

                document.addEventListener('click', (e) => {
                    if (!this.shadowRoot.contains(e.target)) {
                        container.style.display = 'none';
                    }
                });
            }

            handleChipRemoved(e) {
                const value = e.detail.value;
                this.selectedRegions = this.selectedRegions.filter(region => region.value !== value);
                this.updateChips();
            }

            showSuggestionsIfData() {
                const container = this.shadowRoot.getElementById('suggestions-container');
                if (container.children.length > 0) {
                    container.style.display = 'block';
                }
            }

            async handleInput(e) {
                const query = e.target.value.trim();
                clearTimeout(this.timeoutId);

                const button = this.shadowRoot.getElementById('select-button');
                button.disabled = true;

                if (query.length === 0) {
                    this.hideSuggestions();
                    return;
                }

                this.timeoutId = setTimeout(async () => {
                    await this.fetchAndShowSuggestions(query);
                }, 300);
            }

            async fetchAndShowSuggestions(query) {
                const input = this.shadowRoot.getElementById('region-input');
                const container = this.shadowRoot.getElementById('suggestions-container');
                
                container.innerHTML = '<div class="loading">Загрузка...</div>';
                container.style.display = 'block';

                try {
                    const suggestions = await this.fetchSuggestions(query);
                    this.showSuggestions(suggestions, input.value);
                } catch (error) {
                    console.error('Ошибка:', error);
                    container.innerHTML = '<div class="loading">Ошибка загрузки данных</div>';
                }
            }

            async fetchSuggestions(query) {
                const response = await fetch("https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/address", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "Accept": "application/json",
                        "Authorization": "Token " + this.token
                    },
                    body: JSON.stringify({
                        query: query,
                        locations: [{ region_type_full: "край" },{ region_type_full: "область" },{ region_type_full: "республика" }, {fias_level: 1},],
                        restrict_value: true
                    })
                });

                if (!response.ok) throw new Error("Ошибка запроса");
                const data = await response.json();
                return data.suggestions || [];
            }

            getRegionTitle(suggestion) {
                return suggestion?.data?.region_type_full != "республика" ? suggestion?.data?.region_type_full : suggestion?.data?.region_type_full;
            }

            showSuggestions(suggestions, currentValue) {
                const container = this.shadowRoot.getElementById('suggestions-container');
                container.innerHTML = '';
                
                if (suggestions.length === 0) {
                    container.innerHTML = '<div class="loading">Ничего не найдено</div>';
                    return;
                }

                suggestions.forEach(suggestion => {
                    let isRegion = suggestion.data.region_fias_id == suggestion.data.fias_id;
                    
                    if (isRegion && !this.selectedRegions.some(r => r.value === suggestion.data.region_fias_id)) {
                        const item = document.createElement('div');
                        item.className = 'suggestion-item';
                        item.textContent = `${suggestion?.data?.region} ${this.getRegionTitle(suggestion)}`;
                        item.dataset.value = JSON.stringify(suggestion);
                        
                        item.addEventListener('click', () => {
                            this.selectSuggestion(suggestion);
                        });
                        
                        container.appendChild(item);
                    }
                });

                container.style.display = 'block';
            }

            hideSuggestions() {
                const container = this.shadowRoot.getElementById('suggestions-container');
                container.style.display = 'none';
            }


            selectSuggestion(suggestion) {
		    const input = this.shadowRoot.getElementById('region-input');
		    const button = this.shadowRoot.getElementById('select-button');
	    
		    input.value = '';
		    this.selectedSuggestion = suggestion;
		    this.hideSuggestions();
		    button.disabled = false;
	
	    // Формируем правильное название региона
		    const regionName = `${suggestion.data.region} ${this.getRegionTitle(suggestion)}`;
    
		    if (!this.selectedRegions.some(r => r.value === suggestion.data.region_fias_id)) {
		        this.selectedRegions.push({
		            label: regionName,  // Используем сформированное название
		            value: suggestion.data.region_fias_id,
		            data: suggestion.data
		        });
		        this.updateChips();
		    }

                if (this.onSelectCallback) {
                    this.onSelectCallback(suggestion);
                }

                this.dispatchEvent(new CustomEvent('town-selected', {
                    detail: { suggestion },
                    bubbles: true,
                    composed: true
                }));
            }


   	   updateChips() {
	    const container = this.shadowRoot.getElementById('chips-container');
	    container.innerHTML = '';
    
	    this.selectedRegions.forEach(region => {
	        const chip = document.createElement('chip-button');
	        chip.setAttribute('label', region.label);
	        chip.setAttribute('value', region.value);
	        chip.setAttribute('title', `ФИАС ID: ${region.value}`); // Добавляем подсказку
	        container.appendChild(chip);
 	     });
   	   }

            handleButtonClick() {
                if (this.selectedSuggestion) {
                    const input = this.shadowRoot.getElementById('region-input');
                    this.selectSuggestion(this.selectedSuggestion);
                    input.blur();
                }
            }

            handleKeyDown(e) {
                const container = this.shadowRoot.getElementById('suggestions-container');
                const items = container.querySelectorAll('.suggestion-item');
                let currentIndex = -1;

                if (container.style.display !== 'block') return;

                items.forEach((item, index) => {
                    if (item.classList.contains('highlighted')) {
                        item.classList.remove('highlighted');
                        currentIndex = index;
                    }
                });

                if (e.key === 'ArrowDown') {
                    e.preventDefault();
                    const nextIndex = (currentIndex + 1) % items.length;
                    items[nextIndex].classList.add('highlighted');
                    items[nextIndex].scrollIntoView({ block: 'nearest' });
                } else if (e.key === 'ArrowUp') {
                    e.preventDefault();
                    const prevIndex = (currentIndex - 1 + items.length) % items.length;
                    items[prevIndex].classList.add('highlighted');
                    items[prevIndex].scrollIntoView({ block: 'nearest' });
                } else if (e.key === 'Enter') {
                    e.preventDefault();
                    const highlighted = container.querySelector('.suggestion-item.highlighted');
                    if (highlighted) {
                        const suggestion = JSON.parse(highlighted.dataset.value);
                        this.selectSuggestion(suggestion);
                    } else if (items.length > 0) {
                        const suggestion = JSON.parse(items[0].dataset.value);
                        this.selectSuggestion(suggestion);
                    }
                } else if (e.key === 'Escape') {
                    this.hideSuggestions();
                }
            }

            get value() {
                return this.selectedSuggestion ? `${suggestion?.data?.region} ${this.getRegionTitle(suggestion)}` : '';
            }

            get selectedRegion() {
                return this.selectedSuggestion ? this.selectedSuggestion.data : null;
            }
        }

        customElements.define('chip-button', ChipButton);
        customElements.define('region-select', RussiaRegionSelector);

        document.addEventListener('DOMContentLoaded', () => {
            const regionSelector = document.getElementById('myTownSelector');
            const output = document.getElementById('output');

            regionSelector.addEventListener('town-selected', (e) => {
                output.innerHTML = `<strong>Выбран регион:</strong> ${e.detail.suggestion?.data?.region}<br>
                                  <strong>Тип:</strong> ${e.detail.suggestion?.data?.region_type_full}<br>
                                  <strong>ФИАС ID:</strong> ${e.detail.suggestion?.data?.region_fias_id}<br>
                                  <strong>Полные данные:</strong> <pre>${JSON.stringify(e.detail.suggestion.data, null, 2)}</pre>`;
            });

            regionSelector.setOnSelectCallback((suggestion) => {
                console.log('Callback вызван:', suggestion.data.region);
            });
        });
    </script>
</head>
<body>
    <div class="demo-container">
        <h2>Выбор региона</h2>
        <region-select id="myTownSelector"></region-select>
        <div id="output" style="margin-top: 20px; padding: 10px; background: #f5f5f5; border-radius: 4px;"></div>
    </div>
</body>
</html>